     1                                 %line 1+1 main.asm
     2                                 
     3                                 
     4                                 
     5                                 
     6                                 
     7                                 
     8                                 
     9                                 [section .data]
    10 00000000 0000                   bytTracker dw 0
    11 00000002 402000                 symbol db "@",0x20,0
    12 00000005 6D792D626173683A00     startChar db "my-bash:",0
    13 0000000E 2F7573722F62696E00     locCmd db "/usr/bin",0
    14 00000017 436F6D6D616E64204E-    cmdNotFoundErr db "Command Not Found ðŸ˜ž",0xa,0
    15 00000017 6F7420466F756E6420-
    16 00000017 F09F989E0A00       
    17 0000002F 6D696E692D62617368-    cdCmdErr db "mini-bash: cd: No such file or folder ðŸ˜ž",0xa,0
    18 0000002F 3A2063643A204E6F20-
    19 0000002F 737563682066696C65-
    20 0000002F 206F7220666F6C6465-
    21 0000002F 7220F09F989E0A00   
    22 0000005B 00                     isAllCmdP db 0
    23 0000005C 00                     isCWDSet db 0
    24 0000005D 636400                 cdCmd db "cd",0
    25 00000060 636C65617200           clearCmd db "clear",0
    26 00000066 2D5420787465726D2D-    clearOpt db "-T xterm-256color",0
    27 00000066 323536636F6C6F7200 
    28 00000078 6578697400             exitCmd db "exit",0
    29 0000007D 00                     isEnvP db 0
    30                                 
    31                                 
    32                                 
    33                                 
    34                                 
    35                                 [section .bss]
    36 00000000 <gap>                  usrContent resq 131072
    37 00100000 <gap>                  cmdOutput resq 2621440
    38 01500000 <gap>                  envp resq 100
    39 01500320 <gap>                  allUserInput resb 1024
    40 01500720 <gap>                  opt resb 500
    41 01500914 <gap>                  cmdLength resb 1
    42 01500915 <gap>                  addresOfExevArgs resq 20
    43 015009B5 <gap>                  cmd resb 30
    44 015009D3 <gap>                  currentCmdC resb 30
    45 015009F1 <gap>                  fullPath resb 30
    46 01500A0F <gap>                  pipFd resd 2
    47 01500A17 <gap>                  usrFd resw 1
    48 01500A19 <gap>                  singleInput resb 1
    49 01500A1A <gap>                  cWkDir resb 1024
    50 01500E1A <gap>                  oldCWkDir resb 1024
    51                                 
    52                                 
    53                                 
    54                                 [section .text]
    55                                 [global _start]
    56                                 
    57                                 
    58                                 
    59                                 _start:
    60 00000000 480FB60425[00000000]     movzx rax,byte[isCWDSet]
    61 00000009 4883F800               cmp rax,0
    62 0000000D 7503                   jnz resetMem
    63 0000000F E82C050000             call getCwd
    64                                 
    65                                 resetMem:
    66 00000014 48C7C300004001         mov rbx,20971520
    67 0000001B 488D0425[00000000]     lea rax,[cmdOutput]
    68 00000023 E8EC050000             call clearNData
    69 00000028 488D0425[00000000]     lea rax,[cmd]
    70 00000030 E8C3050000             call clearData
    71 00000035 488D0425[00000000]     lea rax,[opt]
    72 0000003D 48C7C3F4010000         mov rbx,500
    73 00000044 E8CB050000             call clearNData
    74 00000049 66C70425[00000000]-    mov word[bytTracker],0
    75 00000049 0000               
    76 00000053 803C25[00000000]00     cmp byte[isEnvP],0
    77 0000005B 7539                   jnz printDefs
    78                                 
    79                                 getEnvP:
    80 0000005D C60425[00000000]01     mov byte[isEnvP],1
    81 00000065 48C7C0FFFFFFFF         mov rax,-1
    82 0000006C 48C7C1FFFFFFFF         mov rcx,-1
    83                                 
    84                                  .getStartAdresOfEnvP:
    85 00000073 48FFC0                  inc rax
    86 00000076 488B14C4                mov rdx,qword[rsp+rax*8]
    87 0000007A 4883FA00                cmp rdx,0
    88 0000007E 75F1                    jnz .getStartAdresOfEnvP
    89                                 
    90                                  .storeEnvP:
    91 00000080 48FFC0                  inc rax
    92 00000083 48FFC1                  inc rcx
    93 00000086 488B14C4                mov rdx,qword[rsp+rax*8]
    94 0000008A 488914CD[00000000]      mov qword[envp+rcx*8],rdx
    95 00000092 4883FA00                cmp rdx,0
    96 00000096 75E6                    jnz .storeEnvP
    97                                 
    98                                 
    99                                 printDefs:
   100 00000098 4C8D3425[00000000]     lea r14,[startChar]
   101 000000A0 49C7C708000000         mov r15,8
   102 000000A7 E8F7040000             call print
   103 000000AC 488D0425[00000000]     lea rax,[cWkDir]
   104 000000B4 E829050000             call countChar
   105 000000B9 4C8D3425[00000000]     lea r14,[cWkDir]
   106 000000C1 4989C7                 mov r15,rax
   107 000000C4 E8DA040000             call print
   108 000000C9 4C8D3425[00000000]     lea r14,[symbol]
   109 000000D1 49C7C702000000         mov r15,2
   110 000000D8 E8C6040000             call print
   111                                 
   112                                 getBinContent:
   113 000000DD 480FB60425[00000000]     movzx rax,byte[isAllCmdP]
   114 000000E6 4883F800               cmp rax,0
   115 000000EA 7503                   jnz getUserInput
   116 000000EC E8ED030000             call getAllCmd
   117                                 
   118                                 
   119                                 getUserInput:
   120 000000F1 48C7C000000000         mov rax,0
   121 000000F8 48C7C700000000         mov rdi,0
   122 000000FF 488D3425[00000000]     lea rsi,[singleInput]
   123 00000107 48C7C201000000         mov rdx,1
   124 0000010E 0F05                   syscall
   125                                 
   126                                 saveInput:
   127 00000110 480FB70425[00000000]     movzx rax,word[bytTracker]
   128 00000119 8A1C25[00000000]       mov bl,byte[singleInput]
   129 00000120 80FB0A                 cmp bl,0xa
   130 00000123 740C                   jz printInput
   131 00000125 8898[00000000]         mov byte[allUserInput+rax],bl
   132 0000012B 66FF0425[00000000]     inc word[bytTracker]
   133                                 
   134                                 printInput:
   135 00000133 48C7C001000000         mov rax,1
   136 0000013A 48C7C701000000         mov rdi,1
   137 00000141 488D3425[00000000]     lea rsi,[singleInput]
   138 00000149 48C7C201000000         mov rdx,1
   139                                 
   140 00000150 759D                   jnz getUserInput
   141 00000152 480FB60425[00000000]     movzx rax,byte[allUserInput]
   142 0000015B 4883F800               cmp rax,0
   143 0000015F 0F8495FEFFFF           jz _start
   144                                 
   145 00000165 4831DB                 xor rbx,rbx
   146 00000168 49C7C0FFFFFFFF         mov r8,-1
   147 0000016F 48C7C1FFFFFFFF         mov rcx,-1
   148 00000176 48C7C200000000         mov rdx,0
   149 0000017D 480FB60425[00000000]     movzx rax ,byte[bytTracker]
   150 00000186 C680[00000000]00       mov byte[allUserInput+rax],0
   151 0000018D 480FB70425[00000000]     movzx rax,word[bytTracker]
   152                                 
   153                                 
   154                                 processInput:
   155                                  .getCmd:
   156 00000196 49FFC0                  inc r8
   157 00000199 418A98[00000000]        mov bl,byte[allUserInput+r8]
   158 000001A0 4C39C0                  cmp rax,r8
   159 000001A3 7430                    jz setCmdLen
   160 000001A5 80FB20                  cmp bl,0x20
   161 000001A8 480F44DA                cmovz rbx,rdx
   162 000001AC 418898[00000000]        mov byte[cmd+r8],bl
   163 000001B3 75DF                    jnz .getCmd
   164 000001B5 4D31FF                  xor r15,r15
   165                                 
   166                                  .getOpt:
   167 000001B8 49FFC0                  inc r8
   168 000001BB 48FFC1                  inc rcx
   169 000001BE 418A98[00000000]        mov bl,byte[allUserInput+r8]
   170 000001C5 80FB20                  cmp bl,0x20
   171 000001C8 490F44DF                cmovz rbx,r15
   172 000001CC 8899[00000000]          mov byte[opt+rcx],bl
   173 000001D2 4C39C0                  cmp rax,r8
   174 000001D5 75DF                    jnz .getOpt
   175                                 
   176                                 
   177                                 setCmdLen:
   178 000001D7 4929C8                 sub r8,rcx
   179 000001DA 44880425[00000000]     mov byte[cmdLength],r8b
   180                                 
   181                                 
   182                                 
   183                                 checkCdCmd:
   184 000001E2 488D3425[00000000]     lea rsi,[cdCmd]
   185 000001EA 488D3C25[00000000]     lea rdi,[cmd]
   186 000001F2 48C7C103000000         mov rcx,3
   187 000001F9 E863030000             call compStringVal
   188 000001FE 4883F800               cmp rax,0
   189 00000202 0F8584020000           jnz processCdCmd
   190                                 
   191                                 
   192                                 
   193                                 
   194                                 checkExitCmd:
   195 00000208 488D3425[00000000]     lea rsi,[exitCmd]
   196 00000210 488D3C25[00000000]     lea rdi,[cmd]
   197 00000218 48C7C105000000         mov rcx,5
   198 0000021F E83D030000             call compStringVal
   199 00000224 4883F800               cmp rax,0
   200 00000228 0F859C020000           jnz end
   201                                 
   202                                 
   203                                 
   204                                 checkCmd:
   205 0000022E 488D0425[00000000]     lea rax,[allUserInput]
   206 00000236 E8BD030000             call clearData
   207 0000023B 4D31D2                 xor r10,r10
   208                                  .checkCItemIfValid:
   209 0000023E 4981FA00001000          cmp r10,1048576
   210 00000245 7D60                    jge printCmdNotFound
   211 00000247 418A82[13000000]        mov al,byte[usrContent+r10+19]
   212 0000024E 3C00                    cmp al,0
   213 00000250 7455                    jz printCmdNotFound
   214 00000252 4831C9                  xor rcx,rcx
   215 00000255 4D31DB                  xor r11,r11
   216 00000258 4D89D3                  mov r11,r10
   217 0000025B 4983C313                add r11,19
   218                                 
   219                                  .getCurrentCmdInDirent:
   220 0000025F 418A83[00000000]        mov al,byte[usrContent+r11]
   221 00000266 3C00                    cmp al,0
   222 00000268 8881[00000000]          mov byte[currentCmdC+rcx],al
   223 0000026E 7406                    jz .cmpCmds
   224 00000270 49FFC3                  inc r11
   225 00000273 48FFC1                  inc rcx
   226 00000276 EBE5                    jmp .getCurrentCmdInDirent
   227                                 
   228                                  .cmpCmds:
   229 00000278 480FB60C25[00000000]      movzx rcx,byte[cmdLength]
   230 00000281 488D3425[00000000]      lea rsi,[cmd]
   231 00000289 488D3C25[00000000]      lea rdi,[currentCmdC]
   232 00000291 E8CB020000              call compStringVal
   233 00000296 4883F800                cmp rax,0
   234 0000029A 753D                    jnz creatFullPathToCmd
   235                                 
   236                                  .updateByteRead:
   237 0000029C 490FB782[10000000]      movzx rax,word[usrContent+r10+16]
   238 000002A4 4901C2                  add r10,rax
   239 000002A7 EB93                    jmp .checkCItemIfValid
   240                                 
   241                                 
   242                                 printCmdNotFound:
   243 000002A9 4C8D3425[00000000]     lea r14,[cmdNotFoundErr]
   244 000002B1 49C7C717000000         mov r15,23
   245 000002B8 E8E6020000             call print
   246 000002BD E939FDFFFF             jmp _start
   247                                 
   248                                 printCdErr:
   249 000002C2 4C8D3425[00000000]     lea r14,[cdCmdErr]
   250 000002CA 49C7C72B000000         mov r15,43
   251 000002D1 E8CD020000             call print
   252 000002D6 E920FDFFFF             jmp _start
   253                                 
   254                                 creatFullPathToCmd:
   255 000002DB 49C7C0FFFFFFFF         mov r8,-1
   256 000002E2 48C7C1FFFFFFFF         mov rcx,-1
   257                                  .addUsrPath:
   258 000002E9 49FFC0                  inc r8
   259 000002EC 48FFC1                  inc rcx
   260 000002EF 480FB681[00000000]      movzx rax,byte[locCmd+rcx]
   261 000002F7 48C7C32F000000          mov rbx,"/"
   262 000002FE 4883F800                cmp rax,0
   263 00000302 480F44C3                cmovz rax,rbx
   264 00000306 418880[00000000]        mov byte[fullPath+r8],al
   265 0000030D 75D8                    jnz .addUsrPath
   266 0000030F 48C7C1FFFFFFFF          mov rcx,-1
   267                                 
   268                                  .addCmd:
   269 00000316 49FFC0                  inc r8
   270 00000319 48FFC1                  inc rcx
   271 0000031C 480FB681[00000000]      movzx rax,byte[cmd+rcx]
   272 00000324 48C7C300000000          mov rbx,0
   273 0000032B 4883F800                cmp rax,0
   274 0000032F 480F44C3                cmovz rax,rbx
   275 00000333 418880[00000000]        mov byte[fullPath+r8],al
   276 0000033A 75D8                    jnz .addCmd
   277                                 
   278                                 
   279                                 
   280 0000033C 48C70425[00000000]-    mov qword[addresOfExevArgs],cmd
   281 0000033C [00000000]         
   282 00000348 49C7C008000000         mov r8,8
   283 0000034F 480FB60425[00000000]     movzx rax, byte[opt]
   284 00000358 4883F800               cmp rax,0
   285 0000035C 7432                   jz createPip
   286 0000035E 4C8D1425[00000000]     lea r10,[opt]
   287                                 
   288                                  .getAddresOfOpt:
   289 00000366 4D8990[00000000]        mov qword[addresOfExevArgs+r8],r10
   290 0000036D 4983C008                add r8,8
   291 00000371 48C7C1FFFFFFFF          mov rcx,-1
   292                                 
   293                                  .contByte:
   294 00000378 48FFC1                  inc rcx
   295 0000037B 490FB61C0A              movzx rbx,byte[r10+rcx]
   296 00000380 4883FB00                cmp rbx,0
   297 00000384 75F0                    jnz .contByte
   298 00000386 48FFC1                 inc rcx
   299 00000389 4901CA                 add r10,rcx
   300 0000038C 41803A00               cmp byte[r10],0
   301 00000390 75D2                   jnz .getAddresOfOpt
   302                                 
   303                                 
   304                                 
   305                                 
   306                                 
   307                                 createPip:
   308 00000392 49C780[00000000]00-    mov qword[addresOfExevArgs+r8],0
   309 00000392 000000             
   310 0000039D 48C7C016000000         mov rax,22
   311 000003A4 488D3C25[00000000]     lea rdi,[pipFd]
   312 000003AC 0F05                   syscall
   313                                 
   314                                 creatChildProc:
   315 000003AE 48C7C039000000         mov rax,57
   316 000003B5 0F05                   syscall
   317 000003B7 4883F800               cmp rax,0
   318 000003BB 7406                   jz childProc
   319 000003BD 7F55                   jg parentCont
   320 000003BF 0F8C05010000           jl end
   321                                 
   322                                 
   323                                 
   324                                 
   325                                 
   326                                 childProc:
   327 000003C5 4831DB                 xor rbx,rbx
   328 000003C8 8B1C25[00000000]       mov ebx,dword[pipFd]
   329 000003CF 48C7C003000000         mov rax,3
   330 000003D6 4889DF                 mov rdi,rbx
   331 000003D9 0F05                   syscall
   332 000003DB 8B1C25[04000000]       mov ebx,dword[pipFd+4]
   333 000003E2 48C7C021000000         mov rax,33
   334 000003E9 4889DF                 mov rdi,rbx
   335 000003EC 48C7C601000000         mov rsi,1
   336 000003F3 0F05                   syscall
   337                                 
   338                                 
   339 000003F5 48C7C03B000000         mov rax ,59
   340 000003FC 488D3C25[00000000]     lea rdi,[fullPath]
   341 00000404 488D3425[00000000]     lea rsi,[addresOfExevArgs]
   342 0000040C 488D1425[00000000]     lea rdx,[envp]
   343 00000414 0F05                   syscall
   344                                 
   345                                 
   346                                 parentCont:
   347 00000416 4831C9                 xor rcx,rcx
   348 00000419 8B0C25[04000000]       mov ecx,dword[pipFd+4]
   349 00000420 48C7C003000000         mov rax,3
   350 00000427 4889CF                 mov rdi,rcx
   351 0000042A 0F05                   syscall
   352 0000042C 48C7C03D000000         mov rax,61
   353 00000433 48C7C7FFFFFFFF         mov rdi,-1
   354 0000043A 4831F6                 xor rsi,rsi
   355 0000043D 0F05                   syscall
   356                                 
   357                                 readDataFromChild:
   358 0000043F 8B0C25[00000000]       mov ecx,dword[pipFd]
   359 00000446 48C7C000000000         mov rax,0
   360 0000044D 4889CF                 mov rdi,rcx
   361 00000450 488D3425[00000000]     lea rsi,[cmdOutput]
   362 00000458 48C7C200004001         mov rdx,20971520
   363 0000045F 0F05                   syscall
   364 00000461 4831DB                 xor rbx,rbx
   365                                 
   366                                 
   367                                 
   368                                 printOutPutFromChild:
   369 00000464 8A83[00000000]         mov al,byte[cmdOutput+rbx]
   370 0000046A 880425[00000000]       mov byte[singleInput],al
   371 00000471 3C00                   cmp al,0
   372 00000473 0F8481FBFFFF           jz _start
   373 00000479 4C8D3425[00000000]     lea r14,[singleInput]
   374 00000481 49C7C701000000         mov r15,1
   375 00000488 E816010000             call print
   376 0000048D 48FFC3                 inc rbx
   377 00000490 EBD0                   jmp printOutPutFromChild
   378                                 
   379                                 processCdCmd:
   380 00000492 E823010000             call setOptIfIsNull
   381 00000497 48C7C050000000         mov rax,80
   382 0000049E 488D3C25[00000000]     lea rdi,[opt]
   383 000004A6 0F05                   syscall
   384 000004A8 4883F800               cmp rax,0
   385 000004AC 0F8C0AFEFFFF           jl printCdErr
   386 000004B2 48C7C101000000         mov rcx,1
   387 000004B9 488D0425[00000000]     lea rax,[cWkDir]
   388 000004C1 E832010000             call clearData
   389 000004C6 E875000000             call getCwd
   390 000004CB E92BFBFFFF             jmp _start
   391                                 
   392                                 
   393                                 end:
   394 000004D0 4831C9                 xor rcx,rcx
   395 000004D3 48C7C03C000000         mov rax,60
   396 000004DA 48C7C700000000         mov rdi,0
   397 000004E1 0F05                   syscall
   398                                 
   399                                 getAllCmd:
   400                                  .openUsrDir:
   401 000004E3 48C7C002000000          mov rax,2
   402 000004EA 488D3C25[00000000]      lea rdi,[locCmd]
   403 000004F2 48C7C600000100          mov rsi,0x10000
   404 000004F9 0F05                    syscall
   405 000004FB 66890425[00000000]      mov word[usrFd],ax
   406                                 
   407                                  .getUsrContent:
   408 00000503 480FB71C25[00000000]      movzx rbx,word[usrFd]
   409 0000050C 48C7C0D9000000          mov rax,217
   410 00000513 4889DF                  mov rdi,rbx
   411 00000516 488D3425[00000000]      lea rsi,[usrContent]
   412 0000051E 48C7C200001000          mov rdx,1048576
   413 00000525 0F05                    syscall
   414                                 
   415                                  .closeUsrDir:
   416 00000527 480FB70C25[00000000]      movzx rcx,word[usrFd]
   417 00000530 48C7C003000000          mov rax,3
   418 00000537 4889CF                  mov rdi,rcx
   419 0000053A 0F05                    syscall
   420                                 
   421 0000053C C60425[00000000]01     mov byte[isAllCmdP],1
   422 00000544 C3                     ret
   423                                 
   424                                 getCwd:
   425 00000545 48C7C04F000000         mov rax,79
   426 0000054C 488D3C25[00000000]     lea rdi,[cWkDir]
   427 00000554 48C7C600020000         mov rsi,512
   428 0000055B 0F05                   syscall
   429 0000055D C60425[00000000]01     mov byte[isCWDSet],1
   430 00000565 C3                     ret
   431                                 
   432                                 
   433                                 compStringVal:
   434 00000566 FC                     cld
   435 00000567 F3A6                   repe cmpsb
   436 00000569 49C7C400000000         mov r12,0
   437 00000570 49C7C501000000         mov r13,1
   438 00000577 490F44C5               cmovz rax,r13
   439 0000057B 490F45C4               cmovnz rax,r12
   440                                 
   441                                 
   442                                 
   443 0000057F C3                     ret
   444                                 
   445                                 copyString:
   446 00000580 49C7C700000000         mov r15,0
   447 00000587 48C7C1FFFFFFFF         mov rcx,-1
   448                                  .copy:
   449 0000058E 48FFC1                  inc rcx
   450 00000591 480FB6040E              movzx rax,byte[rsi+rcx]
   451 00000596 3C20                    cmp al,0x20
   452 00000598 490F44C7                cmovz rax,r15
   453 0000059C 88040F                  mov byte[rdi+rcx],al
   454 0000059F 74EB                    jz .copy
   455 000005A1 4883F800                cmp rax,0
   456 000005A5 75E5                    jnz .copy
   457 000005A7 C3                     ret
   458                                 
   459                                 
   460                                 print:
   461 000005A8 48C7C001000000         mov rax,1
   462 000005AF 48C7C701000000         mov rdi,1
   463 000005B6 498D36                 lea rsi,[r14]
   464 000005B9 4C89FA                 mov rdx,r15
   465 000005BC 0F05                   syscall
   466 000005BE C3                     ret
   467                                 
   468                                 
   469                                 
   470                                 setOptIfIsNull:
   471 000005BF 480FB60425[00000000]     movzx rax, byte[opt]
   472 000005C8 4883F800               cmp rax,0
   473 000005CC 7513                   jnz .end
   474                                  .copy:
   475 000005CE 488D3425[00000000]      lea rsi,[cWkDir]
   476 000005D6 488D3C25[00000000]      lea rdi,[opt]
   477 000005DE E898FFFFFF              call copyString
   478                                  .end:
   479 000005E3 4831C0                  xor rax,rax
   480 000005E6 C3                     ret
   481                                 
   482                                 
   483                                 countChar:
   484 000005E7 48C7C1FFFFFFFF         mov rcx,-1
   485                                  .count:
   486 000005EE 48FFC1                  inc rcx
   487 000005F1 480FB61408              movzx rdx,byte[rax+rcx]
   488 000005F6 4883FA00                cmp rdx,0
   489 000005FA 75F0                    jnz .count
   490 000005FC C3                     ret
   491                                 
   492                                 clearData:
   493 000005FD 48C7C1FFFFFFFF         mov rcx,-1
   494 00000604 4D31ED                 xor r13,r13
   495                                  .start:
   496 00000607 48FFC1                  inc rcx
   497 0000060A 448A2C08                mov r13b,byte[rax+rcx]
   498 0000060E 4180FD00                cmp r13b,0
   499 00000612 C6040800                mov byte[rax+rcx],0
   500 00000616 75ED                    jnz .start
   501 00000618 C3                     ret
   502                                 
   503                                 clearNData:
   504 00000619 48C7C1FFFFFFFF         mov rcx,-1
   505 00000620 4D31ED                 xor r13,r13
   506                                  .start:
   507 00000623 48FFC1                  inc rcx
   508 00000626 448A2C08                mov r13b,byte[rax+rcx]
   509 0000062A 4839CB                  cmp rbx,rcx
   510 0000062D C6040800                mov byte[rax+rcx],0
   511 00000631 75EE                    jnz .start
   512 00000633 C3                     ret
   513                                 
   514                                 
   515                                 
   516                                 
   517                                 
   518                                 
   519                                 
