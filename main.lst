     1                                 %line 1+1 main.asm
     2                                 
     3                                 
     4                                 
     5                                 
     6                                 
     7                                 
     8                                 
     9                                 [section .data]
    10 00000000 0000                   bytTracker dw 0
    11 00000002 0000000000000000       envp dq 0
    12 0000000A 402000                 symbol db "@",0x20,0
    13 0000000D 6D792D626173683A00     startChar db "my-bash:",0
    14 00000016 2F7573722F62696E00     locCmd db "/usr/bin",0
    15 0000001F 436F6D6D616E64204E-    cmdNotFoundErr db "Command Not Found ðŸ˜ž",0xa,0
    16 0000001F 6F7420466F756E6420-
    17 0000001F F09F989E0A00       
    18 00000037 6D696E692D62617368-    cdCmdErr db "mini-bash: cd: No such file or folder ðŸ˜ž",0xa,0
    19 00000037 3A2063643A204E6F20-
    20 00000037 737563682066696C65-
    21 00000037 206F7220666F6C6465-
    22 00000037 7220F09F989E0A00   
    23 00000063 00                     isAllCmdP db 0
    24 00000064 00                     isCWDSet db 0
    25 00000065 636400                 cdCmd db "cd",0
    26 00000068 636C65617200           clearCmd db "clear",0
    27 0000006E 1B5B481B5B324A         clearCode db 27, '[', 'H', 27, '[', '2', 'J'
    28                                 cClen equ $ - clearCode
    29                                 
    30                                 
    31                                 
    32                                 
    33                                 [section .bss]
    34 00000000 <gap>                  usrContent resq 131072
    35 00100000 <gap>                  cmdOutput resq 2621440
    36 01500000 <gap>                  allUserInput resb 1024
    37 01500400 <gap>                  opt resb 100
    38 01500464 <gap>                  cmdLength resb 1
    39 01500465 <gap>                  addresOfExevArgs resq 3
    40 0150047D <gap>                  cmd resb 30
    41 0150049B <gap>                  currentCmdC resb 30
    42 015004B9 <gap>                  fullPath resb 30
    43 015004D7 <gap>                  pipFd resd 2
    44 015004DF <gap>                  usrFd resw 1
    45 015004E1 <gap>                  singleInput resb 1
    46 015004E2 <gap>                  cWkDir resb 1024
    47 015008E2 <gap>                  oldCWkDir resb 1024
    48                                 
    49                                 
    50                                 
    51                                 [section .text]
    52                                 [global _start]
    53                                 
    54                                 
    55                                 
    56                                 _start:
    57 00000000 480FB60425[00000000]     movzx rax,byte[isCWDSet]
    58 00000009 4883F800               cmp rax,0
    59 0000000D 7503                   jnz resetMem
    60 0000000F E8C9040000             call getCwd
    61                                 
    62                                 resetMem:
    63 00000014 488D0425[00000000]     lea rax,[cmdOutput]
    64 0000001C E840050000             call clearData
    65 00000021 488D0425[00000000]     lea rax,[cmd]
    66 00000029 E833050000             call clearData
    67 0000002E 488D0425[00000000]     lea rax,[opt]
    68 00000036 E826050000             call clearData
    69 0000003B 66C70425[00000000]-    mov word[bytTracker],0
    70 0000003B 0000               
    71                                 
    72                                 
    73                                 printDefs:
    74 00000045 4C8D3425[00000000]     lea r14,[startChar]
    75 0000004D 49C7C708000000         mov r15,8
    76 00000054 E8D8040000             call print
    77 00000059 488D0425[00000000]     lea rax,[cWkDir]
    78 00000061 E8E2040000             call countChar
    79 00000066 4C8D3425[00000000]     lea r14,[cWkDir]
    80 0000006E 4989C7                 mov r15,rax
    81 00000071 E8BB040000             call print
    82 00000076 4C8D3425[00000000]     lea r14,[symbol]
    83 0000007E 49C7C702000000         mov r15,2
    84 00000085 E8A7040000             call print
    85                                 
    86                                 getBinContent:
    87 0000008A 480FB60425[00000000]     movzx rax,byte[isAllCmdP]
    88 00000093 4883F800               cmp rax,0
    89 00000097 7503                   jnz getUserInput
    90 00000099 E8DD030000             call getAllCmd
    91                                 
    92                                 
    93                                 getUserInput:
    94 0000009E 48C7C000000000         mov rax,0
    95 000000A5 48C7C700000000         mov rdi,0
    96 000000AC 488D3425[00000000]     lea rsi,[singleInput]
    97 000000B4 48C7C201000000         mov rdx,1
    98 000000BB 0F05                   syscall
    99                                 
   100                                 saveInput:
   101 000000BD 480FB70425[00000000]     movzx rax,word[bytTracker]
   102 000000C6 8A1C25[00000000]       mov bl,byte[singleInput]
   103 000000CD 80FB0A                 cmp bl,0xa
   104 000000D0 740C                   jz printInput
   105 000000D2 8898[00000000]         mov byte[allUserInput+rax],bl
   106 000000D8 66FF0425[00000000]     inc word[bytTracker]
   107                                 
   108                                 printInput:
   109 000000E0 48C7C001000000         mov rax,1
   110 000000E7 48C7C701000000         mov rdi,1
   111 000000EE 488D3425[00000000]     lea rsi,[singleInput]
   112 000000F6 48C7C201000000         mov rdx,1
   113                                 
   114 000000FD 759D                   jnz getUserInput
   115 000000FF 480FB60425[00000000]     movzx rax,byte[allUserInput]
   116 00000108 4883F800               cmp rax,0
   117 0000010C 0F84E8FEFFFF           jz _start
   118                                 
   119 00000112 4831DB                 xor rbx,rbx
   120 00000115 49C7C0FFFFFFFF         mov r8,-1
   121 0000011C 48C7C1FFFFFFFF         mov rcx,-1
   122 00000123 48C7C200000000         mov rdx,0
   123 0000012A 480FB60425[00000000]     movzx rax ,byte[bytTracker]
   124 00000133 C680[00000000]00       mov byte[allUserInput+rax],0
   125                                 
   126                                 
   127                                 
   128                                 processInput:
   129                                  .getCmd:
   130 0000013A 49FFC0                  inc r8
   131 0000013D 418A98[00000000]        mov bl,byte[allUserInput+r8]
   132 00000144 480FB70425[00000000]      movzx rax,word[bytTracker]
   133 0000014D 4C39C0                  cmp rax,r8
   134 00000150 7426                    jz setOptIfIsNull
   135 00000152 80FB20                  cmp bl,0x20
   136 00000155 480F44DA                cmovz rbx,rdx
   137 00000159 418898[00000000]        mov byte[cmd+r8],bl
   138 00000160 75D6                    jnz .getCmd
   139                                 
   140                                  .getOpt:
   141 00000162 49FFC0                  inc r8
   142 00000165 48FFC1                  inc rcx
   143 00000168 418A98[00000000]        mov bl,byte[allUserInput+r8]
   144 0000016F 80FB00                  cmp bl,0
   145 00000172 8899[00000000]          mov byte[opt+rcx],bl
   146 00000178 75E6                    jnz .getOpt
   147                                 
   148                                 
   149                                 
   150                                 setOptIfIsNull:
   151 0000017A 4929C8                 sub r8,rcx
   152 0000017D 44880425[00000000]     mov byte[cmdLength],r8b
   153 00000185 480FB60425[00000000]     movzx rax, byte[opt]
   154 0000018E 4883F800               cmp rax,0
   155 00000192 7513                   jnz checkCdCmd
   156 00000194 488D3425[00000000]     lea rsi,[cWkDir]
   157 0000019C 488D3C25[00000000]     lea rdi,[opt]
   158 000001A4 E86F030000             call copyString
   159                                 
   160                                 
   161                                 checkCdCmd:
   162 000001A9 488D3425[00000000]     lea rsi,[cdCmd]
   163 000001B1 488D3C25[00000000]     lea rdi,[cmd]
   164 000001B9 48C7C103000000         mov rcx,3
   165 000001C0 E839030000             call compStringVal
   166 000001C5 4883F800               cmp rax,0
   167 000001C9 0F855F020000           jnz processCdCmd
   168                                 
   169                                 
   170                                 chekClearCmd:
   171 000001CF 488D3425[00000000]     lea rsi,[clearCmd]
   172 000001D7 488D3C25[00000000]     lea rdi,[cmd]
   173 000001DF 48C7C106000000         mov rcx,6
   174 000001E6 E813030000             call compStringVal
   175 000001EB 4883F800               cmp rax,0
   176 000001EF 741A                   jz checkCmd
   177 000001F1 4C8D3425[00000000]     lea r14,[clearCode]
   178 000001F9 49BF07000000000000-    mov r15,cClen
   179 000001F9 00                 
   180 00000203 E829030000             call print
   181 00000208 E9EEFDFFFF             jmp _start
   182                                 
   183                                 
   184                                 checkCmd:
   185 0000020D 488D0425[00000000]     lea rax,[allUserInput]
   186 00000215 E847030000             call clearData
   187 0000021A 4D31D2                 xor r10,r10
   188                                  .checkCItemIfValid:
   189 0000021D 4981FA00001000          cmp r10,1048576
   190 00000224 7D60                    jge printCmdNotFound
   191 00000226 418A82[13000000]        mov al,byte[usrContent+r10+19]
   192 0000022D 3C00                    cmp al,0
   193 0000022F 7455                    jz printCmdNotFound
   194 00000231 4831C9                  xor rcx,rcx
   195 00000234 4D31DB                  xor r11,r11
   196 00000237 4D89D3                  mov r11,r10
   197 0000023A 4983C313                add r11,19
   198                                 
   199                                  .getCurrentCmdInDirent:
   200 0000023E 418A83[00000000]        mov al,byte[usrContent+r11]
   201 00000245 3C00                    cmp al,0
   202 00000247 8881[00000000]          mov byte[currentCmdC+rcx],al
   203 0000024D 7406                    jz .cmpCmds
   204 0000024F 49FFC3                  inc r11
   205 00000252 48FFC1                  inc rcx
   206 00000255 EBE5                    jmp .getCurrentCmdInDirent
   207                                 
   208                                  .cmpCmds:
   209 00000257 480FB60C25[00000000]      movzx rcx,byte[cmdLength]
   210 00000260 488D3425[00000000]      lea rsi,[cmd]
   211 00000268 488D3C25[00000000]      lea rdi,[currentCmdC]
   212 00000270 E889020000              call compStringVal
   213 00000275 4883F800                cmp rax,0
   214 00000279 753D                    jnz creatFullPathToCmd
   215                                 
   216                                  .updateByteRead:
   217 0000027B 490FB782[10000000]      movzx rax,word[usrContent+r10+16]
   218 00000283 4901C2                  add r10,rax
   219 00000286 EB93                    jmp .checkCItemIfValid
   220                                 
   221                                 
   222                                 printCmdNotFound:
   223 00000288 4C8D3425[00000000]     lea r14,[cmdNotFoundErr]
   224 00000290 49C7C717000000         mov r15,23
   225 00000297 E895020000             call print
   226 0000029C E95AFDFFFF             jmp _start
   227                                 
   228                                 printCdErr:
   229 000002A1 4C8D3425[00000000]     lea r14,[cdCmdErr]
   230 000002A9 49C7C72B000000         mov r15,43
   231 000002B0 E87C020000             call print
   232 000002B5 E941FDFFFF             jmp _start
   233                                 
   234                                 creatFullPathToCmd:
   235 000002BA 49C7C0FFFFFFFF         mov r8,-1
   236 000002C1 48C7C1FFFFFFFF         mov rcx,-1
   237                                  .addUsrPath:
   238 000002C8 49FFC0                  inc r8
   239 000002CB 48FFC1                  inc rcx
   240 000002CE 480FB681[00000000]      movzx rax,byte[locCmd+rcx]
   241 000002D6 48C7C32F000000          mov rbx,"/"
   242 000002DD 4883F800                cmp rax,0
   243 000002E1 480F44C3                cmovz rax,rbx
   244 000002E5 418880[00000000]        mov byte[fullPath+r8],al
   245 000002EC 75D8                    jnz .addUsrPath
   246 000002EE 48C7C1FFFFFFFF          mov rcx,-1
   247                                 
   248                                  .addCmd:
   249 000002F5 49FFC0                  inc r8
   250 000002F8 48FFC1                  inc rcx
   251 000002FB 480FB681[00000000]      movzx rax,byte[cmd+rcx]
   252 00000303 48C7C300000000          mov rbx,0
   253 0000030A 4883F800                cmp rax,0
   254 0000030E 480F44C3                cmovz rax,rbx
   255 00000312 418880[00000000]        mov byte[fullPath+r8],al
   256 00000319 75D8                    jnz .addCmd
   257                                 
   258                                 
   259                                 createPip:
   260 0000031B 48C7C016000000         mov rax,22
   261 00000322 488D3C25[00000000]     lea rdi,[pipFd]
   262 0000032A 0F05                   syscall
   263                                 
   264                                 creatChildProc:
   265 0000032C 48C7C039000000         mov rax,57
   266 00000333 0F05                   syscall
   267 00000335 4883F800               cmp rax,0
   268 00000339 7406                   jz childProc
   269 0000033B 7F79                   jg parentCont
   270 0000033D 0F8C24010000           jl end
   271                                 
   272                                 
   273                                 
   274                                 
   275                                 
   276                                 childProc:
   277 00000343 4831DB                 xor rbx,rbx
   278 00000346 8B1C25[00000000]       mov ebx,dword[pipFd]
   279 0000034D 48C7C003000000         mov rax,3
   280 00000354 4889DF                 mov rdi,rbx
   281 00000357 0F05                   syscall
   282 00000359 8B1C25[04000000]       mov ebx,dword[pipFd+4]
   283 00000360 48C7C021000000         mov rax,33
   284 00000367 4889DF                 mov rdi,rbx
   285 0000036A 48C7C601000000         mov rsi,1
   286 00000371 0F05                   syscall
   287 00000373 48C70425[00000000]-    mov qword[addresOfExevArgs],fullPath
   288 00000373 [00000000]         
   289 0000037F 48C70425[08000000]-    mov qword[addresOfExevArgs+8],opt
   290 0000037F [00000000]         
   291 0000038B 48C70425[10000000]-    mov qword[addresOfExevArgs+16],0
   292 0000038B 00000000           
   293 00000397 48C7C03B000000         mov rax ,59
   294 0000039E 488D3C25[00000000]     lea rdi,[fullPath]
   295 000003A6 488D3425[00000000]     lea rsi,[addresOfExevArgs]
   296 000003AE 488D1425[00000000]     lea rdx,[envp]
   297 000003B6 0F05                   syscall
   298                                 
   299                                 
   300                                 parentCont:
   301 000003B8 4831C9                 xor rcx,rcx
   302 000003BB 8B0C25[04000000]       mov ecx,dword[pipFd+4]
   303 000003C2 48C7C003000000         mov rax,3
   304 000003C9 4889CF                 mov rdi,rcx
   305 000003CC 0F05                   syscall
   306 000003CE 48C7C03D000000         mov rax,61
   307 000003D5 48C7C7FFFFFFFF         mov rdi,-1
   308 000003DC 4831F6                 xor rsi,rsi
   309 000003DF 0F05                   syscall
   310                                 
   311                                 readDataFromChild:
   312 000003E1 8B0C25[00000000]       mov ecx,dword[pipFd]
   313 000003E8 48C7C000000000         mov rax,0
   314 000003EF 4889CF                 mov rdi,rcx
   315 000003F2 488D3425[00000000]     lea rsi,[cmdOutput]
   316 000003FA 48C7C200001000         mov rdx,1048576
   317 00000401 0F05                   syscall
   318 00000403 4831DB                 xor rbx,rbx
   319                                 
   320                                 
   321                                 
   322                                 printOutPutFromChild:
   323 00000406 8A83[00000000]         mov al,byte[cmdOutput+rbx]
   324 0000040C 880425[00000000]       mov byte[singleInput],al
   325 00000413 3C00                   cmp al,0
   326 00000415 0F84DFFBFFFF           jz _start
   327 0000041B 4C8D3425[00000000]     lea r14,[singleInput]
   328 00000423 49C7C701000000         mov r15,1
   329 0000042A E802010000             call print
   330 0000042F 48FFC3                 inc rbx
   331 00000432 EBD0                   jmp printOutPutFromChild
   332                                 
   333                                 processCdCmd:
   334 00000434 48C7C050000000         mov rax,80
   335 0000043B 488D3C25[00000000]     lea rdi,[opt]
   336 00000443 0F05                   syscall
   337 00000445 4883F800               cmp rax,0
   338 00000449 0F8C4CFEFFFF           jl printCdErr
   339 0000044F 48C7C101000000         mov rcx,1
   340 00000456 488D0425[00000000]     lea rax,[cWkDir]
   341 0000045E E8FE000000             call clearData
   342 00000463 E875000000             call getCwd
   343 00000468 E98EFBFFFF             jmp _start
   344                                 
   345                                 
   346                                 end:
   347 0000046D 4831C9                 xor rcx,rcx
   348 00000470 48C7C03C000000         mov rax,60
   349 00000477 48C7C700000000         mov rdi,0
   350 0000047E 0F05                   syscall
   351                                 
   352                                 getAllCmd:
   353                                  .openUsrDir:
   354 00000480 48C7C002000000          mov rax,2
   355 00000487 488D3C25[00000000]      lea rdi,[locCmd]
   356 0000048F 48C7C600000100          mov rsi,0x10000
   357 00000496 0F05                    syscall
   358 00000498 66890425[00000000]      mov word[usrFd],ax
   359                                 
   360                                  .getUsrContent:
   361 000004A0 480FB71C25[00000000]      movzx rbx,word[usrFd]
   362 000004A9 48C7C0D9000000          mov rax,217
   363 000004B0 4889DF                  mov rdi,rbx
   364 000004B3 488D3425[00000000]      lea rsi,[usrContent]
   365 000004BB 48C7C200001000          mov rdx,1048576
   366 000004C2 0F05                    syscall
   367                                 
   368                                  .closeUsrDir:
   369 000004C4 480FB70C25[00000000]      movzx rcx,word[usrFd]
   370 000004CD 48C7C003000000          mov rax,3
   371 000004D4 4889CF                  mov rdi,rcx
   372 000004D7 0F05                    syscall
   373                                 
   374 000004D9 C60425[00000000]01     mov byte[isAllCmdP],1
   375 000004E1 C3                     ret
   376                                 
   377                                 getCwd:
   378 000004E2 48C7C04F000000         mov rax,79
   379 000004E9 488D3C25[00000000]     lea rdi,[cWkDir]
   380 000004F1 48C7C600020000         mov rsi,512
   381 000004F8 0F05                   syscall
   382 000004FA C60425[00000000]01     mov byte[isCWDSet],1
   383 00000502 C3                     ret
   384                                 
   385                                 
   386                                 compStringVal:
   387 00000503 FC                     cld
   388 00000504 F3A6                   repe cmpsb
   389 00000506 49C7C400000000         mov r12,0
   390 0000050D 49C7C501000000         mov r13,1
   391 00000514 490F44C5               cmovz rax,r13
   392 00000518 490F45C4               cmovnz rax,r12
   393                                 
   394                                 
   395                                 
   396 0000051C C3                     ret
   397                                 
   398                                 copyString:
   399 0000051D 48C7C1FFFFFFFF         mov rcx,-1
   400                                  .copy:
   401 00000524 48FFC1                  inc rcx
   402 00000527 480FB6040E              movzx rax,byte[rsi+rcx]
   403 0000052C 88040F                  mov byte[rdi+rcx],al
   404 0000052F 4883F800                cmp rax,0
   405 00000533 75ED                    jnz .copy
   406 00000535 C3                     ret
   407                                 
   408                                 
   409                                 print:
   410 00000536 48C7C001000000         mov rax,1
   411 0000053D 48C7C701000000         mov rdi,1
   412 00000544 498D36                 lea rsi,[r14]
   413 00000547 4C89FA                 mov rdx,r15
   414 0000054A 0F05                   syscall
   415 0000054C C3                     ret
   416                                 
   417                                 
   418                                 
   419                                 countChar:
   420 0000054D 48C7C1FFFFFFFF         mov rcx,-1
   421                                  .count:
   422 00000554 48FFC1                  inc rcx
   423 00000557 480FB61408              movzx rdx,byte[rax+rcx]
   424 0000055C 4881FA00000000          cmp rdx,0.
   425 00000563 75ED                    jnz .count
   426 00000565 C3                     ret
   427                                 
   428                                 clearData:
   429 00000566 48C7C1FFFFFFFF         mov rcx,-1
   430 0000056D 4D31ED                 xor r13,r13
   431                                  .start:
   432 00000570 48FFC1                  inc rcx
   433 00000573 448A2C08                mov r13b,byte[rax+rcx]
   434 00000577 4180FD00                cmp r13b,0
   435 0000057B C6040800                mov byte[rax+rcx],0
   436 0000057F 75ED                    jnz .start
   437 00000581 C3                     ret
   438                                 
   439                                 
   440                                 
   441                                 
   442                                 
   443                                 
   444                                 
