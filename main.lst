     1                                 %line 1+1 main.asm
     2                                 
     3                                 
     4                                 
     5                                 
     6                                 
     7                                 
     8                                 
     9                                 [section .data]
    10 00000000 0000                   bytTracker dw 0
    11 00000002 402000                 symbol db "@",0x20,0
    12 00000005 6D792D626173683A00     startChar db "my-bash:",0
    13 0000000E 2F7573722F62696E00     locCmd db "/usr/bin",0
    14 00000017 436F6D6D616E64204E-    cmdNotFoundErr db "Command Not Found ðŸ˜ž",0xa,0
    15 00000017 6F7420466F756E6420-
    16 00000017 F09F989E0A00       
    17 0000002F 6D696E692D62617368-    cdCmdErr db "mini-bash: cd: No such file or folder ðŸ˜ž",0xa,0
    18 0000002F 3A2063643A204E6F20-
    19 0000002F 737563682066696C65-
    20 0000002F 206F7220666F6C6465-
    21 0000002F 7220F09F989E0A00   
    22 0000005B 00                     isAllCmdP db 0
    23 0000005C 00                     isCWDSet db 0
    24 0000005D 636400                 cdCmd db "cd",0
    25 00000060 636C65617200           clearCmd db "clear",0
    26 00000066 2D5420787465726D2D-    clearOpt db "-T xterm-256color",0
    27 00000066 323536636F6C6F7200 
    28 00000078 6578697400             exitCmd db "exit",0
    29 0000007D 00                     isEnvP db 0
    30 0000007E 00                     escFlag db 0
    31 0000007F 0000000000000000       prevCmdOffset dq 0
    32 00000087 0000000000000000       prevCmdSizeOffset dq 0
    33                                 
    34                                 
    35                                 
    36                                 [section .bss]
    37 00000000 <gap>                  usrContent resq 131072
    38 00100000 <gap>                  cmdOutput resq 2621440
    39 01500000 <gap>                  prevCmd resq 2621440
    40 02900000 <gap>                  prevCmdSize resw 1000
    41 029007D0 <gap>                  envp resq 100
    42 02900AF0 <gap>                  allUserInput resb 1024
    43 02900EF0 <gap>                  opt resb 500
    44 029010E4 <gap>                  cmdLength resb 1
    45 029010E5 <gap>                  addresOfExevArgs resq 20
    46 02901185 <gap>                  cmd resb 30
    47 029011A3 <gap>                  currentCmdC resb 30
    48 029011C1 <gap>                  fullPath resb 30
    49 029011DF <gap>                  pipFd resd 2
    50 029011E7 <gap>                  usrFd resw 1
    51 029011E9 <gap>                  singleInput resb 1
    52 029011EA <gap>                  cWkDir resb 1024
    53 029015EA <gap>                  oldCWkDir resb 1024
    54 029019EA <gap>                  prevCmdP resq 1
    55                                 
    56                                 
    57                                 [section .text]
    58                                 [global _start]
    59                                 
    60                                 
    61                                 
    62                                 _start:
    63 00000000 480FB60425[00000000]     movzx rax,byte[isCWDSet]
    64 00000009 4883F800               cmp rax,0
    65 0000000D 7503                   jnz resetMem
    66 0000000F E8B4050000             call getCwd
    67                                 
    68                                 resetMem:
    69 00000014 48C7C300004001         mov rbx,20971520
    70 0000001B 488D0425[00000000]     lea rax,[cmdOutput]
    71 00000023 E8C3060000             call clearNData
    72 00000028 488D0425[00000000]     lea rax,[cmd]
    73 00000030 E89A060000             call clearData
    74 00000035 488D0425[00000000]     lea rax,[opt]
    75 0000003D 48C7C3F4010000         mov rbx,500
    76 00000044 E8A2060000             call clearNData
    77 00000049 66C70425[00000000]-    mov word[bytTracker],0
    78 00000049 0000               
    79 00000053 803C25[00000000]00     cmp byte[isEnvP],0
    80 0000005B 7539                   jnz printDefs
    81                                 
    82                                 getEnvP:
    83 0000005D C60425[00000000]01     mov byte[isEnvP],1
    84 00000065 48C7C0FFFFFFFF         mov rax,-1
    85 0000006C 48C7C1FFFFFFFF         mov rcx,-1
    86                                 
    87                                  .getStartAdresOfEnvP:
    88 00000073 48FFC0                  inc rax
    89 00000076 488B14C4                mov rdx,qword[rsp+rax*8]
    90 0000007A 4883FA00                cmp rdx,0
    91 0000007E 75F1                    jnz .getStartAdresOfEnvP
    92                                 
    93                                  .storeEnvP:
    94 00000080 48FFC0                  inc rax
    95 00000083 48FFC1                  inc rcx
    96 00000086 488B14C4                mov rdx,qword[rsp+rax*8]
    97 0000008A 488914CD[00000000]      mov qword[envp+rcx*8],rdx
    98 00000092 4883FA00                cmp rdx,0
    99 00000096 75E6                    jnz .storeEnvP
   100                                 
   101                                 
   102                                 printDefs:
   103 00000098 4C8D3425[00000000]     lea r14,[startChar]
   104 000000A0 49C7C708000000         mov r15,8
   105 000000A7 E89E050000             call print
   106 000000AC 488D0425[00000000]     lea rax,[cWkDir]
   107 000000B4 E8D0050000             call countChar
   108 000000B9 4C8D3425[00000000]     lea r14,[cWkDir]
   109 000000C1 4989C7                 mov r15,rax
   110 000000C4 E881050000             call print
   111 000000C9 4C8D3425[00000000]     lea r14,[symbol]
   112 000000D1 49C7C702000000         mov r15,2
   113 000000D8 E86D050000             call print
   114                                 
   115                                 getBinContent:
   116 000000DD 480FB60425[00000000]     movzx rax,byte[isAllCmdP]
   117 000000E6 4883F800               cmp rax,0
   118 000000EA 7503                   jnz getUserInput
   119 000000EC E875040000             call getAllCmd
   120                                 
   121                                 
   122                                 getUserInput:
   123 000000F1 E8A9050000             call getInput
   124 000000F6 49C7C000000000         mov r8,0
   125 000000FD 49C7C101000000         mov r9,1
   126                                 
   127                                 
   128                                 checkEscFlag:
   129 00000104 803C25[00000000]01     cmp byte[escFlag],1
   130 0000010C 0F84A7030000           jz processEscChars
   131                                 
   132                                 setEscFlag:
   133 00000112 80FB1B                 cmp bl,0x1B
   134 00000115 4D0F44C1               cmovz r8,r9
   135 00000119 44880425[00000000]     mov byte[escFlag],r8b
   136 00000121 74CC                   jz getUserInput
   137                                 
   138                                 
   139                                 
   140                                 
   141                                 saveInput:
   142 00000123 80FB0A                 cmp bl,0xa
   143 00000126 740C                   jz printInput
   144 00000128 8898[00000000]         mov byte[allUserInput+rax],bl
   145 0000012E 66FF0425[00000000]     inc word[bytTracker]
   146                                 
   147                                 
   148                                 
   149                                 
   150                                 printInput:
   151 00000136 48C7C001000000         mov rax,1
   152 0000013D 48C7C701000000         mov rdi,1
   153 00000144 488D3425[00000000]     lea rsi,[singleInput]
   154 0000014C 48C7C201000000         mov rdx,1
   155 00000153 0F05                   syscall
   156 00000155 7598                   jnz getUserInput
   157 00000157 480FB60425[00000000]     movzx rax,byte[allUserInput]
   158 00000160 4883F800               cmp rax,0
   159 00000164 0F8490FEFFFF           jz _start
   160                                 
   161 0000016A 4831DB                 xor rbx,rbx
   162 0000016D 49C7C0FFFFFFFF         mov r8,-1
   163 00000174 48C7C1FFFFFFFF         mov rcx,-1
   164 0000017B 48C7C200000000         mov rdx,0
   165 00000182 480FB70425[00000000]     movzx rax,word[bytTracker]
   166 0000018B C680[00000000]00       mov byte[allUserInput+rax],0
   167                                 
   168                                 
   169                                 
   170                                 processInput:
   171                                  .getCmd:
   172 00000192 49FFC0                  inc r8
   173 00000195 418A98[00000000]        mov bl,byte[allUserInput+r8]
   174 0000019C 4C39C0                  cmp rax,r8
   175 0000019F 7430                    jz setCmdLen
   176 000001A1 80FB20                  cmp bl,0x20
   177 000001A4 480F44DA                cmovz rbx,rdx
   178 000001A8 418898[00000000]        mov byte[cmd+r8],bl
   179 000001AF 75DF                    jnz .getCmd
   180 000001B1 4D31FF                  xor r15,r15
   181                                 
   182                                  .getOpt:
   183 000001B4 49FFC0                  inc r8
   184 000001B7 48FFC1                  inc rcx
   185 000001BA 418A98[00000000]        mov bl,byte[allUserInput+r8]
   186 000001C1 80FB20                  cmp bl,0x20
   187 000001C4 490F44DF                cmovz rbx,r15
   188 000001C8 8899[00000000]          mov byte[opt+rcx],bl
   189 000001CE 4C39C0                  cmp rax,r8
   190 000001D1 75DF                    jnz .getOpt
   191                                 
   192                                 
   193                                 setCmdLen:
   194 000001D3 4929C8                 sub r8,rcx
   195 000001D6 44880425[00000000]     mov byte[cmdLength],r8b
   196                                 
   197                                 
   198                                 
   199                                 checkCdCmd:
   200 000001DE 488D3425[00000000]     lea rsi,[cdCmd]
   201 000001E6 488D3C25[00000000]     lea rdi,[cmd]
   202 000001EE 48C7C103000000         mov rcx,3
   203 000001F5 E8EF030000             call compStringVal
   204 000001FA 4883F800               cmp rax,0
   205 000001FE 0F8577020000           jnz processCdCmd
   206                                 
   207                                 
   208                                 
   209                                 
   210                                 checkExitCmd:
   211 00000204 488D3425[00000000]     lea rsi,[exitCmd]
   212 0000020C 488D3C25[00000000]     lea rdi,[cmd]
   213 00000214 48C7C105000000         mov rcx,5
   214 0000021B E8C9030000             call compStringVal
   215 00000220 4883F800               cmp rax,0
   216 00000224 0F8528030000           jnz end
   217                                 
   218                                 
   219                                 
   220                                 checkCmd:
   221 0000022A 4D31D2                 xor r10,r10
   222                                  .checkCItemIfValid:
   223 0000022D 4981FA00001000          cmp r10,1048576
   224 00000234 7D60                    jge printCmdNotFound
   225 00000236 418A82[13000000]        mov al,byte[usrContent+r10+19]
   226 0000023D 3C00                    cmp al,0
   227 0000023F 7455                    jz printCmdNotFound
   228 00000241 4831C9                  xor rcx,rcx
   229 00000244 4D31DB                  xor r11,r11
   230 00000247 4D89D3                  mov r11,r10
   231 0000024A 4983C313                add r11,19
   232                                 
   233                                  .getCurrentCmdInDirent:
   234 0000024E 418A83[00000000]        mov al,byte[usrContent+r11]
   235 00000255 3C00                    cmp al,0
   236 00000257 8881[00000000]          mov byte[currentCmdC+rcx],al
   237 0000025D 7406                    jz .cmpCmds
   238 0000025F 49FFC3                  inc r11
   239 00000262 48FFC1                  inc rcx
   240 00000265 EBE5                    jmp .getCurrentCmdInDirent
   241                                 
   242                                  .cmpCmds:
   243 00000267 480FB60C25[00000000]      movzx rcx,byte[cmdLength]
   244 00000270 488D3425[00000000]      lea rsi,[cmd]
   245 00000278 488D3C25[00000000]      lea rdi,[currentCmdC]
   246 00000280 E864030000              call compStringVal
   247 00000285 4883F800                cmp rax,0
   248 00000289 753D                    jnz creatFullPathToCmd
   249                                 
   250                                  .updateByteRead:
   251 0000028B 490FB782[10000000]      movzx rax,word[usrContent+r10+16]
   252 00000293 4901C2                  add r10,rax
   253 00000296 EB93                    jmp .checkCItemIfValid
   254                                 
   255                                 
   256                                 printCmdNotFound:
   257 00000298 4C8D3425[00000000]     lea r14,[cmdNotFoundErr]
   258 000002A0 49C7C717000000         mov r15,23
   259 000002A7 E89E030000             call print
   260 000002AC E94AFDFFFF             jmp _start
   261                                 
   262                                 printCdErr:
   263 000002B1 4C8D3425[00000000]     lea r14,[cdCmdErr]
   264 000002B9 49C7C72B000000         mov r15,43
   265 000002C0 E885030000             call print
   266 000002C5 E931FDFFFF             jmp _start
   267                                 
   268                                 creatFullPathToCmd:
   269 000002CA 49C7C0FFFFFFFF         mov r8,-1
   270 000002D1 48C7C1FFFFFFFF         mov rcx,-1
   271                                  .addUsrPath:
   272 000002D8 49FFC0                  inc r8
   273 000002DB 48FFC1                  inc rcx
   274 000002DE 480FB681[00000000]      movzx rax,byte[locCmd+rcx]
   275 000002E6 48C7C32F000000          mov rbx,"/"
   276 000002ED 4883F800                cmp rax,0
   277 000002F1 480F44C3                cmovz rax,rbx
   278 000002F5 418880[00000000]        mov byte[fullPath+r8],al
   279 000002FC 75D8                    jnz .addUsrPath
   280 000002FE 48C7C1FFFFFFFF          mov rcx,-1
   281                                 
   282                                  .addCmd:
   283 00000305 49FFC0                  inc r8
   284 00000308 48FFC1                  inc rcx
   285 0000030B 480FB681[00000000]      movzx rax,byte[cmd+rcx]
   286 00000313 48C7C300000000          mov rbx,0
   287 0000031A 4883F800                cmp rax,0
   288 0000031E 480F44C3                cmovz rax,rbx
   289 00000322 418880[00000000]        mov byte[fullPath+r8],al
   290 00000329 75D8                    jnz .addCmd
   291                                 
   292                                 
   293                                 
   294 0000032B 48C70425[00000000]-    mov qword[addresOfExevArgs],cmd
   295 0000032B [00000000]         
   296 00000337 49C7C008000000         mov r8,8
   297 0000033E 480FB60425[00000000]     movzx rax, byte[opt]
   298 00000347 4883F800               cmp rax,0
   299 0000034B 7432                   jz createPip
   300 0000034D 4C8D1425[00000000]     lea r10,[opt]
   301                                 
   302                                  .getAddresOfOpt:
   303 00000355 4D8990[00000000]        mov qword[addresOfExevArgs+r8],r10
   304 0000035C 4983C008                add r8,8
   305 00000360 48C7C1FFFFFFFF          mov rcx,-1
   306                                 
   307                                  .contByte:
   308 00000367 48FFC1                  inc rcx
   309 0000036A 490FB61C0A              movzx rbx,byte[r10+rcx]
   310 0000036F 4883FB00                cmp rbx,0
   311 00000373 75F0                    jnz .contByte
   312 00000375 48FFC1                 inc rcx
   313 00000378 4901CA                 add r10,rcx
   314 0000037B 41803A00               cmp byte[r10],0
   315 0000037F 75D2                   jnz .getAddresOfOpt
   316                                 
   317                                 
   318                                 
   319                                 
   320                                 
   321                                 createPip:
   322 00000381 49C780[00000000]00-    mov qword[addresOfExevArgs+r8],0
   323 00000381 000000             
   324 0000038C 48C7C016000000         mov rax,22
   325 00000393 488D3C25[00000000]     lea rdi,[pipFd]
   326 0000039B 0F05                   syscall
   327                                 
   328                                 creatChildProc:
   329 0000039D 48C7C039000000         mov rax,57
   330 000003A4 0F05                   syscall
   331 000003A6 4883F800               cmp rax,0
   332 000003AA 7406                   jz childProc
   333 000003AC 7F55                   jg parentCont
   334 000003AE 0F8C9E010000           jl end
   335                                 
   336                                 
   337                                 
   338                                 
   339                                 
   340                                 childProc:
   341 000003B4 4831DB                 xor rbx,rbx
   342 000003B7 8B1C25[00000000]       mov ebx,dword[pipFd]
   343 000003BE 48C7C003000000         mov rax,3
   344 000003C5 4889DF                 mov rdi,rbx
   345 000003C8 0F05                   syscall
   346 000003CA 8B1C25[04000000]       mov ebx,dword[pipFd+4]
   347 000003D1 48C7C021000000         mov rax,33
   348 000003D8 4889DF                 mov rdi,rbx
   349 000003DB 48C7C601000000         mov rsi,1
   350 000003E2 0F05                   syscall
   351                                 
   352                                 
   353 000003E4 48C7C03B000000         mov rax ,59
   354 000003EB 488D3C25[00000000]     lea rdi,[fullPath]
   355 000003F3 488D3425[00000000]     lea rsi,[addresOfExevArgs]
   356 000003FB 488D1425[00000000]     lea rdx,[envp]
   357 00000403 0F05                   syscall
   358                                 
   359                                 
   360                                 parentCont:
   361 00000405 4831C9                 xor rcx,rcx
   362 00000408 8B0C25[04000000]       mov ecx,dword[pipFd+4]
   363 0000040F 48C7C003000000         mov rax,3
   364 00000416 4889CF                 mov rdi,rcx
   365 00000419 0F05                   syscall
   366 0000041B 48C7C03D000000         mov rax,61
   367 00000422 48C7C7FFFFFFFF         mov rdi,-1
   368 00000429 4831F6                 xor rsi,rsi
   369 0000042C 0F05                   syscall
   370                                 
   371                                 readDataFromChild:
   372 0000042E 8B0C25[00000000]       mov ecx,dword[pipFd]
   373 00000435 48C7C000000000         mov rax,0
   374 0000043C 4889CF                 mov rdi,rcx
   375 0000043F 488D3425[00000000]     lea rsi,[cmdOutput]
   376 00000447 48C7C200004001         mov rdx,20971520
   377 0000044E 0F05                   syscall
   378 00000450 4831DB                 xor rbx,rbx
   379                                 
   380                                 
   381                                 
   382                                 printOutPutFromChild:
   383 00000453 8A83[00000000]         mov al,byte[cmdOutput+rbx]
   384 00000459 880425[00000000]       mov byte[singleInput],al
   385 00000460 3C00                   cmp al,0
   386 00000462 0F8484000000           jz saveCmd
   387 00000468 4C8D3425[00000000]     lea r14,[singleInput]
   388 00000470 49C7C701000000         mov r15,1
   389 00000477 E8CE010000             call print
   390 0000047C 48FFC3                 inc rbx
   391 0000047F EBD0                   jmp printOutPutFromChild
   392                                 
   393                                 processCdCmd:
   394 00000481 E8DB010000             call setOptIfIsNull
   395 00000486 48C7C050000000         mov rax,80
   396 0000048D 488D3C25[00000000]     lea rdi,[opt]
   397 00000495 0F05                   syscall
   398 00000497 4883F800               cmp rax,0
   399 0000049B 0F8C0AFEFFFF           jl printCdErr
   400 000004A1 48C7C101000000         mov rcx,1
   401 000004A8 488D0425[00000000]     lea rax,[cWkDir]
   402 000004B0 E81A020000             call clearData
   403 000004B5 E80E010000             call getCwd
   404 000004BA E93CFBFFFF             jmp _start
   405                                 
   406                                 
   407                                 processEscChars:
   408 000004BF 80FB5B                 cmp bl,0x5B
   409 000004C2 74FE                   jz .processArowKey
   410                                 
   411                                 
   412                                  .processArowKey:
   413 000004C4 49C7C000000000          mov r8,0
   414 000004CB 49C7C101000000          mov r9,1
   415 000004D2 E8C8010000              call getInput
   416 000004D7 80FB42                  cmp bl,0x42
   417 000004DA 7414                    jz getPrevCmd
   418 000004DC 80FB41                  cmp bl,0x41
   419 000004DF 4D0F44C1                cmovz r8,r9
   420 000004E3 740B                    jz getPrevCmd
   421                                 
   422 000004E5 C60425[00000000]00     mov byte[escFlag],0
   423 000004ED E909FBFFFF             jmp _start
   424                                 
   425                                 
   426                                 
   427                                 getPrevCmd:
   428                                 
   429                                 
   430                                 
   431                                 saveCmd:
   432                                 
   433 000004F2 488B0425[00000000]     mov rax,qword[prevCmdOffset]
   434 000004FA 488D3425[00000000]     lea rsi,[allUserInput]
   435 00000502 488DB8[00000000]       lea rdi,[prevCmd+rax]
   436 00000509 4889F9                 mov rcx,rdi
   437 0000050C E81A010000             call copyStringWithoutRemoveSpace
   438 00000511 4829CF                 sub rdi,rcx
   439 00000514 48013C25[00000000]     add qword[prevCmdOffset],rdi
   440 0000051C 48890C25[00000000]     mov qword[prevCmdP],rcx
   441 00000524 480FB70C25[00000000]     movzx rcx,word[bytTracker]
   442 0000052D 480FB70425[00000000]     movzx rax,word[prevCmdSizeOffset]
   443 00000536 66898C00[00000000]     mov word[prevCmdSize+rax*2],cx
   444 0000053E 66FF0425[00000000]     inc word [prevCmdSizeOffset]
   445 00000546 488D0425[00000000]     lea rax,[allUserInput]
   446 0000054E E87C010000             call clearData
   447 00000553 E9A3FAFFFF             jmp _start
   448                                 
   449                                 
   450                                 
   451                                 end:
   452 00000558 4831C9                 xor rcx,rcx
   453 0000055B 48C7C03C000000         mov rax,60
   454 00000562 48C7C700000000         mov rdi,0
   455 00000569 0F05                   syscall
   456                                 
   457                                 getAllCmd:
   458                                  .openUsrDir:
   459 0000056B 48C7C002000000          mov rax,2
   460 00000572 488D3C25[00000000]      lea rdi,[locCmd]
   461 0000057A 48C7C600000100          mov rsi,0x10000
   462 00000581 0F05                    syscall
   463 00000583 66890425[00000000]      mov word[usrFd],ax
   464                                 
   465                                  .getUsrContent:
   466 0000058B 480FB71C25[00000000]      movzx rbx,word[usrFd]
   467 00000594 48C7C0D9000000          mov rax,217
   468 0000059B 4889DF                  mov rdi,rbx
   469 0000059E 488D3425[00000000]      lea rsi,[usrContent]
   470 000005A6 48C7C200001000          mov rdx,1048576
   471 000005AD 0F05                    syscall
   472                                 
   473                                  .closeUsrDir:
   474 000005AF 480FB70C25[00000000]      movzx rcx,word[usrFd]
   475 000005B8 48C7C003000000          mov rax,3
   476 000005BF 4889CF                  mov rdi,rcx
   477 000005C2 0F05                    syscall
   478                                 
   479 000005C4 C60425[00000000]01     mov byte[isAllCmdP],1
   480 000005CC C3                     ret
   481                                 
   482                                 getCwd:
   483 000005CD 48C7C04F000000         mov rax,79
   484 000005D4 488D3C25[00000000]     lea rdi,[cWkDir]
   485 000005DC 48C7C600020000         mov rsi,512
   486 000005E3 0F05                   syscall
   487 000005E5 C60425[00000000]01     mov byte[isCWDSet],1
   488 000005ED C3                     ret
   489                                 
   490                                 
   491                                 compStringVal:
   492 000005EE FC                     cld
   493 000005EF F3A6                   repe cmpsb
   494 000005F1 49C7C400000000         mov r12,0
   495 000005F8 49C7C501000000         mov r13,1
   496 000005FF 490F44C5               cmovz rax,r13
   497 00000603 490F45C4               cmovnz rax,r12
   498                                 
   499                                 
   500                                 
   501 00000607 C3                     ret
   502                                 
   503                                 copyString:
   504 00000608 49C7C700000000         mov r15,0
   505 0000060F 48C7C1FFFFFFFF         mov rcx,-1
   506                                  .copy:
   507 00000616 48FFC1                  inc rcx
   508 00000619 480FB6040E              movzx rax,byte[rsi+rcx]
   509 0000061E 3C20                    cmp al,0x20
   510 00000620 490F44C7                cmovz rax,r15
   511 00000624 88040F                  mov byte[rdi+rcx],al
   512 00000627 74EB                    jz .copy
   513 00000629 4883F800                cmp rax,0
   514 0000062D 75E5                    jnz .copy
   515 0000062F C3                     ret
   516                                 
   517                                 
   518                                 copyStringWithoutRemoveSpace:
   519 00000630 49C7C700000000         mov r15,0
   520                                  .copy:
   521 00000637 480FB606                movzx rax,byte[rsi]
   522 0000063B 8807                    mov byte[rdi],al
   523 0000063D 4883F800                cmp rax,0
   524 00000641 7406                    jz .end
   525 00000643 48FFC6                  inc rsi
   526 00000646 48FFC7                  inc rdi
   527 00000649 EBEA                    jmp .copy
   528                                 
   529                                  .end:
   530 0000064B 48FFC7                  inc rdi
   531 0000064E C3                      ret
   532                                 
   533                                 
   534                                 print:
   535 0000064F 48C7C001000000         mov rax,1
   536 00000656 48C7C701000000         mov rdi,1
   537 0000065D 498D36                 lea rsi,[r14]
   538 00000660 4C89FA                 mov rdx,r15
   539 00000663 0F05                   syscall
   540 00000665 C3                     ret
   541                                 
   542                                 
   543                                 
   544                                 setOptIfIsNull:
   545 00000666 480FB60425[00000000]     movzx rax, byte[opt]
   546 0000066F 4883F800               cmp rax,0
   547 00000673 7513                   jnz .end
   548                                  .copy:
   549 00000675 488D3425[00000000]      lea rsi,[cWkDir]
   550 0000067D 488D3C25[00000000]      lea rdi,[opt]
   551 00000685 E879FFFFFF              call copyString
   552                                  .end:
   553 0000068A 4831C0                  xor rax,rax
   554 0000068D C3                     ret
   555                                 
   556                                 
   557                                 countChar:
   558 0000068E 48C7C1FFFFFFFF         mov rcx,-1
   559                                  .count:
   560 00000695 48FFC1                  inc rcx
   561 00000698 480FB61408              movzx rdx,byte[rax+rcx]
   562 0000069D 4883FA00                cmp rdx,0
   563 000006A1 75F0                    jnz .count
   564 000006A3 C3                     ret
   565                                 
   566                                 
   567                                 getInput:
   568 000006A4 48C7C000000000         mov rax,0
   569 000006AB 48C7C700000000         mov rdi,0
   570 000006B2 488D3425[00000000]     lea rsi,[singleInput]
   571 000006BA 48C7C201000000         mov rdx,1
   572 000006C1 0F05                   syscall
   573 000006C3 480FB70425[00000000]     movzx rax,word[bytTracker]
   574 000006CC 8A1C25[00000000]       mov bl,byte[singleInput]
   575 000006D3 C3                     ret
   576                                 
   577                                 
   578                                 
   579                                 clearData:
   580 000006D4 48C7C1FFFFFFFF         mov rcx,-1
   581 000006DB 4D31ED                 xor r13,r13
   582                                  .start:
   583 000006DE 48FFC1                  inc rcx
   584 000006E1 448A2C08                mov r13b,byte[rax+rcx]
   585 000006E5 4180FD00                cmp r13b,0
   586 000006E9 C6040800                mov byte[rax+rcx],0
   587 000006ED 75ED                    jnz .start
   588 000006EF C3                     ret
   589                                 
   590                                 clearNData:
   591 000006F0 4801C3                 add rbx,rax
   592 000006F3 4D31ED                 xor r13,r13
   593                                 
   594                                  .start:
   595 000006F6 448A28                  mov r13b,byte[rax]
   596 000006F9 4839C3                  cmp rbx,rax
   597 000006FC 7406                    jz .end
   598 000006FE C60000                  mov byte[rax],0
   599 00000701 48FFC0                  inc rax
   600 00000704 EBEE                    jmp .start
   601                                 
   602                                  .end:
   603 00000706 C3                      ret
   604                                 
   605                                 
   606                                 
   607                                 
   608                                 
   609                                 
   610                                 
   611                                 
   612                                 
   613                                 
   614                                 
   615                                 
   616                                 
   617                                 
   618                                 
   619                                 
