     1                                 %line 1+1 main.asm
     2                                 
     3                                 
     4                                 
     5                                 
     6                                 
     7                                 
     8                                 
     9                                 [section .data]
    10 00000000 0000                   bytTracker dw 0
    11 00000002 402000                 symbol db "@",0x20,0
    12 00000005 6D792D626173683A00     startChar db "my-bash:",0
    13 0000000E 2F7573722F62696E00     locCmd db "/usr/bin",0
    14 00000017 436F6D6D616E64204E-    cmdNotFoundErr db "Command Not Found ðŸ˜ž",0xa,0
    15 00000017 6F7420466F756E6420-
    16 00000017 F09F989E0A00       
    17 0000002F 6D696E692D62617368-    cdCmdErr db "mini-bash: cd: No such file or folder ðŸ˜ž",0xa,0
    18 0000002F 3A2063643A204E6F20-
    19 0000002F 737563682066696C65-
    20 0000002F 206F7220666F6C6465-
    21 0000002F 7220F09F989E0A00   
    22 0000005B 00                     isAllCmdP db 0
    23 0000005C 00                     isCWDSet db 0
    24 0000005D 636400                 cdCmd db "cd",0
    25 00000060 636C65617200           clearCmd db "clear",0
    26 00000066 2D5420787465726D2D-    clearOpt db "-T xterm-256color",0
    27 00000066 323536636F6C6F7200 
    28 00000078 6578697400             exitCmd db "exit",0
    29 0000007D 00                     isEnvP db 0
    30 0000007E 00                     escFlag db 0
    31 0000007F 0000000000000000       prevCmdOffset dq 0
    32 00000087 FFFFFFFFFFFFFFFF       prevCmdSizeOffset dq -1
    33 0000008F 0000000000000000       prevCmdSizeCalc dq 0
    34                                 
    35                                 
    36                                 
    37                                 [section .bss]
    38 00000000 <gap>                  usrContent resq 131072
    39 00100000 <gap>                  cmdOutput resq 2621440
    40 01500000 <gap>                  prevCmd resq 2621440
    41 02900000 <gap>                  prevCmdSize resw 1000
    42 029007D0 <gap>                  envp resq 100
    43 02900AF0 <gap>                  allUserInput resb 1024
    44 02900EF0 <gap>                  opt resb 500
    45 029010E4 <gap>                  cmdLength resb 1
    46 029010E5 <gap>                  addresOfExevArgs resq 20
    47 02901185 <gap>                  cmd resb 30
    48 029011A3 <gap>                  currentCmdC resb 30
    49 029011C1 <gap>                  fullPath resb 30
    50 029011DF <gap>                  pipFd resd 2
    51 029011E7 <gap>                  usrFd resw 1
    52 029011E9 <gap>                  singleInput resb 1
    53 029011EA <gap>                  cWkDir resb 1024
    54 029015EA <gap>                  oldCWkDir resb 1024
    55 029019EA <gap>                  prevCmdP resq 1
    56                                 
    57                                 
    58                                 [section .text]
    59                                 [global _start]
    60                                 
    61                                 
    62                                 
    63                                 _start:
    64 00000000 480FB60425[00000000]     movzx rax,byte[isCWDSet]
    65 00000009 4883F800               cmp rax,0
    66 0000000D 7503                   jnz resetMem
    67 0000000F E8B0060000             call getCwd
    68                                 
    69                                 resetMem:
    70 00000014 48C7C300004001         mov rbx,20971520
    71 0000001B 488D0425[00000000]     lea rax,[cmdOutput]
    72 00000023 E8BF070000             call clearNData
    73 00000028 488D0425[00000000]     lea rax,[cmd]
    74 00000030 E896070000             call clearData
    75 00000035 488D0425[00000000]     lea rax,[opt]
    76 0000003D 48C7C3F4010000         mov rbx,500
    77 00000044 E89E070000             call clearNData
    78 00000049 66C70425[00000000]-    mov word[bytTracker],0
    79 00000049 0000               
    80 00000053 803C25[00000000]00     cmp byte[isEnvP],0
    81 0000005B 7539                   jnz printDefs
    82                                 
    83                                 getEnvP:
    84 0000005D C60425[00000000]01     mov byte[isEnvP],1
    85 00000065 48C7C0FFFFFFFF         mov rax,-1
    86 0000006C 48C7C1FFFFFFFF         mov rcx,-1
    87                                 
    88                                  .getStartAdresOfEnvP:
    89 00000073 48FFC0                  inc rax
    90 00000076 488B14C4                mov rdx,qword[rsp+rax*8]
    91 0000007A 4883FA00                cmp rdx,0
    92 0000007E 75F1                    jnz .getStartAdresOfEnvP
    93                                 
    94                                  .storeEnvP:
    95 00000080 48FFC0                  inc rax
    96 00000083 48FFC1                  inc rcx
    97 00000086 488B14C4                mov rdx,qword[rsp+rax*8]
    98 0000008A 488914CD[00000000]      mov qword[envp+rcx*8],rdx
    99 00000092 4883FA00                cmp rdx,0
   100 00000096 75E6                    jnz .storeEnvP
   101                                 
   102                                 
   103                                 printDefs:
   104 00000098 4C8D3425[00000000]     lea r14,[startChar]
   105 000000A0 49C7C708000000         mov r15,8
   106 000000A7 E89A060000             call print
   107 000000AC 488D0425[00000000]     lea rax,[cWkDir]
   108 000000B4 E8CC060000             call countChar
   109 000000B9 4C8D3425[00000000]     lea r14,[cWkDir]
   110 000000C1 4989C7                 mov r15,rax
   111 000000C4 E87D060000             call print
   112 000000C9 4C8D3425[00000000]     lea r14,[symbol]
   113 000000D1 49C7C702000000         mov r15,2
   114 000000D8 E869060000             call print
   115                                 
   116                                 getBinContent:
   117 000000DD 480FB60425[00000000]     movzx rax,byte[isAllCmdP]
   118 000000E6 4883F800               cmp rax,0
   119 000000EA 7503                   jnz getUserInput
   120 000000EC E871050000             call getAllCmd
   121                                 
   122                                 
   123                                 getUserInput:
   124 000000F1 E8A5060000             call getInput
   125 000000F6 49C7C000000000         mov r8,0
   126 000000FD 49C7C101000000         mov r9,1
   127                                 
   128                                 
   129                                 checkEscFlag:
   130 00000104 803C25[00000000]01     cmp byte[escFlag],1
   131 0000010C 0F84A7030000           jz processEscChars
   132                                 
   133                                 setEscFlag:
   134 00000112 80FB1B                 cmp bl,0x1B
   135 00000115 4D0F44C1               cmovz r8,r9
   136 00000119 44880425[00000000]     mov byte[escFlag],r8b
   137 00000121 74CC                   jz getUserInput
   138                                 
   139                                 
   140                                 
   141                                 
   142                                 saveInput:
   143 00000123 80FB0A                 cmp bl,0xa
   144 00000126 740C                   jz printInput
   145 00000128 8898[00000000]         mov byte[allUserInput+rax],bl
   146 0000012E 66FF0425[00000000]     inc word[bytTracker]
   147                                 
   148                                 
   149                                 
   150                                 
   151                                 printInput:
   152 00000136 48C7C001000000         mov rax,1
   153 0000013D 48C7C701000000         mov rdi,1
   154 00000144 488D3425[00000000]     lea rsi,[singleInput]
   155 0000014C 48C7C201000000         mov rdx,1
   156 00000153 0F05                   syscall
   157 00000155 7598                   jnz getUserInput
   158 00000157 480FB60425[00000000]     movzx rax,byte[allUserInput]
   159 00000160 4883F800               cmp rax,0
   160 00000164 0F8490FEFFFF           jz _start
   161                                 
   162 0000016A 4831DB                 xor rbx,rbx
   163 0000016D 49C7C0FFFFFFFF         mov r8,-1
   164 00000174 48C7C1FFFFFFFF         mov rcx,-1
   165 0000017B 48C7C200000000         mov rdx,0
   166 00000182 480FB70425[00000000]     movzx rax,word[bytTracker]
   167 0000018B C680[00000000]00       mov byte[allUserInput+rax],0
   168                                 
   169                                 
   170                                 
   171                                 processInput:
   172                                  .getCmd:
   173 00000192 49FFC0                  inc r8
   174 00000195 418A98[00000000]        mov bl,byte[allUserInput+r8]
   175 0000019C 4C39C0                  cmp rax,r8
   176 0000019F 7430                    jz setCmdLen
   177 000001A1 80FB20                  cmp bl,0x20
   178 000001A4 480F44DA                cmovz rbx,rdx
   179 000001A8 418898[00000000]        mov byte[cmd+r8],bl
   180 000001AF 75DF                    jnz .getCmd
   181 000001B1 4D31FF                  xor r15,r15
   182                                 
   183                                  .getOpt:
   184 000001B4 49FFC0                  inc r8
   185 000001B7 48FFC1                  inc rcx
   186 000001BA 418A98[00000000]        mov bl,byte[allUserInput+r8]
   187 000001C1 80FB20                  cmp bl,0x20
   188 000001C4 490F44DF                cmovz rbx,r15
   189 000001C8 8899[00000000]          mov byte[opt+rcx],bl
   190 000001CE 4C39C0                  cmp rax,r8
   191 000001D1 75DF                    jnz .getOpt
   192                                 
   193                                 
   194                                 setCmdLen:
   195 000001D3 4929C8                 sub r8,rcx
   196 000001D6 44880425[00000000]     mov byte[cmdLength],r8b
   197                                 
   198                                 
   199                                 
   200                                 checkCdCmd:
   201 000001DE 488D3425[00000000]     lea rsi,[cdCmd]
   202 000001E6 488D3C25[00000000]     lea rdi,[cmd]
   203 000001EE 48C7C103000000         mov rcx,3
   204 000001F5 E8EB040000             call compStringVal
   205 000001FA 4883F800               cmp rax,0
   206 000001FE 0F8577020000           jnz processCdCmd
   207                                 
   208                                 
   209                                 
   210                                 
   211                                 checkExitCmd:
   212 00000204 488D3425[00000000]     lea rsi,[exitCmd]
   213 0000020C 488D3C25[00000000]     lea rdi,[cmd]
   214 00000214 48C7C105000000         mov rcx,5
   215 0000021B E8C5040000             call compStringVal
   216 00000220 4883F800               cmp rax,0
   217 00000224 0F8524040000           jnz end
   218                                 
   219                                 
   220                                 
   221                                 checkCmd:
   222 0000022A 4D31D2                 xor r10,r10
   223                                  .checkCItemIfValid:
   224 0000022D 4981FA00001000          cmp r10,1048576
   225 00000234 7D60                    jge printCmdNotFound
   226 00000236 418A82[13000000]        mov al,byte[usrContent+r10+19]
   227 0000023D 3C00                    cmp al,0
   228 0000023F 7455                    jz printCmdNotFound
   229 00000241 4831C9                  xor rcx,rcx
   230 00000244 4D31DB                  xor r11,r11
   231 00000247 4D89D3                  mov r11,r10
   232 0000024A 4983C313                add r11,19
   233                                 
   234                                  .getCurrentCmdInDirent:
   235 0000024E 418A83[00000000]        mov al,byte[usrContent+r11]
   236 00000255 3C00                    cmp al,0
   237 00000257 8881[00000000]          mov byte[currentCmdC+rcx],al
   238 0000025D 7406                    jz .cmpCmds
   239 0000025F 49FFC3                  inc r11
   240 00000262 48FFC1                  inc rcx
   241 00000265 EBE5                    jmp .getCurrentCmdInDirent
   242                                 
   243                                  .cmpCmds:
   244 00000267 480FB60C25[00000000]      movzx rcx,byte[cmdLength]
   245 00000270 488D3425[00000000]      lea rsi,[cmd]
   246 00000278 488D3C25[00000000]      lea rdi,[currentCmdC]
   247 00000280 E860040000              call compStringVal
   248 00000285 4883F800                cmp rax,0
   249 00000289 753D                    jnz creatFullPathToCmd
   250                                 
   251                                  .updateByteRead:
   252 0000028B 490FB782[10000000]      movzx rax,word[usrContent+r10+16]
   253 00000293 4901C2                  add r10,rax
   254 00000296 EB93                    jmp .checkCItemIfValid
   255                                 
   256                                 
   257                                 printCmdNotFound:
   258 00000298 4C8D3425[00000000]     lea r14,[cmdNotFoundErr]
   259 000002A0 49C7C717000000         mov r15,23
   260 000002A7 E89A040000             call print
   261 000002AC E94AFDFFFF             jmp _start
   262                                 
   263                                 printCdErr:
   264 000002B1 4C8D3425[00000000]     lea r14,[cdCmdErr]
   265 000002B9 49C7C72B000000         mov r15,43
   266 000002C0 E881040000             call print
   267 000002C5 E931FDFFFF             jmp _start
   268                                 
   269                                 creatFullPathToCmd:
   270 000002CA 49C7C0FFFFFFFF         mov r8,-1
   271 000002D1 48C7C1FFFFFFFF         mov rcx,-1
   272                                  .addUsrPath:
   273 000002D8 49FFC0                  inc r8
   274 000002DB 48FFC1                  inc rcx
   275 000002DE 480FB681[00000000]      movzx rax,byte[locCmd+rcx]
   276 000002E6 48C7C32F000000          mov rbx,"/"
   277 000002ED 4883F800                cmp rax,0
   278 000002F1 480F44C3                cmovz rax,rbx
   279 000002F5 418880[00000000]        mov byte[fullPath+r8],al
   280 000002FC 75D8                    jnz .addUsrPath
   281 000002FE 48C7C1FFFFFFFF          mov rcx,-1
   282                                 
   283                                  .addCmd:
   284 00000305 49FFC0                  inc r8
   285 00000308 48FFC1                  inc rcx
   286 0000030B 480FB681[00000000]      movzx rax,byte[cmd+rcx]
   287 00000313 48C7C300000000          mov rbx,0
   288 0000031A 4883F800                cmp rax,0
   289 0000031E 480F44C3                cmovz rax,rbx
   290 00000322 418880[00000000]        mov byte[fullPath+r8],al
   291 00000329 75D8                    jnz .addCmd
   292                                 
   293                                 
   294                                 
   295 0000032B 48C70425[00000000]-    mov qword[addresOfExevArgs],cmd
   296 0000032B [00000000]         
   297 00000337 49C7C008000000         mov r8,8
   298 0000033E 480FB60425[00000000]     movzx rax, byte[opt]
   299 00000347 4883F800               cmp rax,0
   300 0000034B 7432                   jz createPip
   301 0000034D 4C8D1425[00000000]     lea r10,[opt]
   302                                 
   303                                  .getAddresOfOpt:
   304 00000355 4D8990[00000000]        mov qword[addresOfExevArgs+r8],r10
   305 0000035C 4983C008                add r8,8
   306 00000360 48C7C1FFFFFFFF          mov rcx,-1
   307                                 
   308                                  .contByte:
   309 00000367 48FFC1                  inc rcx
   310 0000036A 490FB61C0A              movzx rbx,byte[r10+rcx]
   311 0000036F 4883FB00                cmp rbx,0
   312 00000373 75F0                    jnz .contByte
   313 00000375 48FFC1                 inc rcx
   314 00000378 4901CA                 add r10,rcx
   315 0000037B 41803A00               cmp byte[r10],0
   316 0000037F 75D2                   jnz .getAddresOfOpt
   317                                 
   318                                 
   319                                 
   320                                 
   321                                 
   322                                 createPip:
   323 00000381 49C780[00000000]00-    mov qword[addresOfExevArgs+r8],0
   324 00000381 000000             
   325 0000038C 48C7C016000000         mov rax,22
   326 00000393 488D3C25[00000000]     lea rdi,[pipFd]
   327 0000039B 0F05                   syscall
   328                                 
   329                                 creatChildProc:
   330 0000039D 48C7C039000000         mov rax,57
   331 000003A4 0F05                   syscall
   332 000003A6 4883F800               cmp rax,0
   333 000003AA 7406                   jz childProc
   334 000003AC 7F55                   jg parentCont
   335 000003AE 0F8C9A020000           jl end
   336                                 
   337                                 
   338                                 
   339                                 
   340                                 
   341                                 childProc:
   342 000003B4 4831DB                 xor rbx,rbx
   343 000003B7 8B1C25[00000000]       mov ebx,dword[pipFd]
   344 000003BE 48C7C003000000         mov rax,3
   345 000003C5 4889DF                 mov rdi,rbx
   346 000003C8 0F05                   syscall
   347 000003CA 8B1C25[04000000]       mov ebx,dword[pipFd+4]
   348 000003D1 48C7C021000000         mov rax,33
   349 000003D8 4889DF                 mov rdi,rbx
   350 000003DB 48C7C601000000         mov rsi,1
   351 000003E2 0F05                   syscall
   352                                 
   353                                 
   354 000003E4 48C7C03B000000         mov rax ,59
   355 000003EB 488D3C25[00000000]     lea rdi,[fullPath]
   356 000003F3 488D3425[00000000]     lea rsi,[addresOfExevArgs]
   357 000003FB 488D1425[00000000]     lea rdx,[envp]
   358 00000403 0F05                   syscall
   359                                 
   360                                 
   361                                 parentCont:
   362 00000405 4831C9                 xor rcx,rcx
   363 00000408 8B0C25[04000000]       mov ecx,dword[pipFd+4]
   364 0000040F 48C7C003000000         mov rax,3
   365 00000416 4889CF                 mov rdi,rcx
   366 00000419 0F05                   syscall
   367 0000041B 48C7C03D000000         mov rax,61
   368 00000422 48C7C7FFFFFFFF         mov rdi,-1
   369 00000429 4831F6                 xor rsi,rsi
   370 0000042C 0F05                   syscall
   371                                 
   372                                 readDataFromChild:
   373 0000042E 8B0C25[00000000]       mov ecx,dword[pipFd]
   374 00000435 48C7C000000000         mov rax,0
   375 0000043C 4889CF                 mov rdi,rcx
   376 0000043F 488D3425[00000000]     lea rsi,[cmdOutput]
   377 00000447 48C7C200004001         mov rdx,20971520
   378 0000044E 0F05                   syscall
   379 00000450 4831DB                 xor rbx,rbx
   380                                 
   381                                 
   382                                 
   383                                 printOutPutFromChild:
   384 00000453 8A83[00000000]         mov al,byte[cmdOutput+rbx]
   385 00000459 880425[00000000]       mov byte[singleInput],al
   386 00000460 3C00                   cmp al,0
   387 00000462 0F8479010000           jz saveCmd
   388 00000468 4C8D3425[00000000]     lea r14,[singleInput]
   389 00000470 49C7C701000000         mov r15,1
   390 00000477 E8CA020000             call print
   391 0000047C 48FFC3                 inc rbx
   392 0000047F EBD0                   jmp printOutPutFromChild
   393                                 
   394                                 processCdCmd:
   395 00000481 E8D7020000             call setOptIfIsNull
   396 00000486 48C7C050000000         mov rax,80
   397 0000048D 488D3C25[00000000]     lea rdi,[opt]
   398 00000495 0F05                   syscall
   399 00000497 4883F800               cmp rax,0
   400 0000049B 0F8C0AFEFFFF           jl printCdErr
   401 000004A1 48C7C101000000         mov rcx,1
   402 000004A8 488D0425[00000000]     lea rax,[cWkDir]
   403 000004B0 E816030000             call clearData
   404 000004B5 E80A020000             call getCwd
   405 000004BA E93CFBFFFF             jmp _start
   406                                 
   407                                 
   408                                 processEscChars:
   409 000004BF 80FB5B                 cmp bl,0x5B
   410 000004C2 74FE                   jz .processArowKey
   411                                 
   412                                 
   413                                  .processArowKey:
   414 000004C4 49C7C000000000          mov r8,0
   415 000004CB 49C7C101000000          mov r9,1
   416 000004D2 E8C4020000              call getInput
   417 000004D7 80FB42                  cmp bl,0x42
   418 000004DA 7414                    jz getPrevCmd
   419 000004DC 80FB41                  cmp bl,0x41
   420 000004DF 4D0F44C1                cmovz r8,r9
   421 000004E3 740B                    jz getPrevCmd
   422                                 
   423 000004E5 C60425[00000000]00     mov byte[escFlag],0
   424 000004ED E909FBFFFF             jmp _start
   425                                 
   426                                 
   427                                 
   428                                 getPrevCmd:
   429 000004F2 4D31C9                 xor r9,r9
   430 000004F5 4983F800               cmp r8,0
   431 000004F9 7575                   jnz .up
   432                                 
   433                                  .down:
   434 000004FB 488D0425[00000000]      lea rax,[prevCmd]
   435 00000503 48030425[00000000]      add rax,qword[prevCmdOffset]
   436 0000050B 488D1C25[00000000]      lea rbx,[prevCmdSize]
   437 00000513 48031C25[00000000]      add rbx,qword[prevCmdSizeOffset]
   438 0000051B 480FB713                movzx rdx,word[rbx]
   439 0000051F 4829D0                  sub rax,rdx
   440 00000522 483B0425[00000000]      cmp rax,qword[prevCmdP]
   441 0000052A 0F84CAFAFFFF            jz _start
   442                                 
   443 00000530 488B0425[00000000]      mov rax,qword[prevCmdP]
   444 00000538 488B1C25[00000000]      mov rbx,qword[prevCmdSizeCalc]
   445 00000540 4C0FB78C1B[00000000]      movzx r9,word[prevCmdSize+rbx*2]
   446 00000549 4889C6                  mov rsi,rax
   447 0000054C 488D3C25[00000000]      lea rdi,[allUserInput]
   448 00000554 E8CE010000              call copyStringWithoutRemoveSpace
   449 00000559 6644890C25[00000000]      mov word[bytTracker],r9w
   450 00000562 4C010C25[00000000]      add qword[prevCmdP],r9
   451 0000056A 48FF0425[00000000]      inc qword[prevCmdSizeCalc]
   452                                 
   453                                 
   454                                 
   455                                  .up:
   456 00000572 488D0425[00000000]      lea rax,[prevCmd]
   457 0000057A 48390425[00000000]      cmp qword[prevCmdP],rax
   458 00000582 0F8472FAFFFF            jz _start
   459                                 
   460 00000588 488B0425[00000000]      mov rax,qword[prevCmdP]
   461 00000590 488B1C25[00000000]      mov rbx,qword[prevCmdSizeCalc]
   462 00000598 4C0FB78C1B[00000000]      movzx r9,word[prevCmdSize+rbx*2]
   463 000005A1 4889C6                  mov rsi,rax
   464 000005A4 488D3C25[00000000]      lea rdi,[allUserInput]
   465 000005AC E876010000              call copyStringWithoutRemoveSpace
   466 000005B1 6644890C25[00000000]      mov word[bytTracker],r9w
   467 000005BA 4C290C25[00000000]      sub qword[prevCmdP],r9
   468 000005C2 48FF0C25[00000000]      dec qword[prevCmdSizeCalc]
   469                                 
   470                                 
   471                                 
   472 000005CA C60425[00000000]00     mov byte[escFlag],0
   473 000005D2 4C8D3425[00000000]     lea r14,[allUserInput]
   474 000005DA 4D89CF                 mov r15,r9
   475 000005DD E864010000             call print
   476 000005E2 E905FBFFFF             jmp getUserInput
   477                                 
   478                                 
   479                                 
   480                                 
   481                                 saveCmd:
   482                                 
   483 000005E7 488B0425[00000000]     mov rax,qword[prevCmdOffset]
   484 000005EF 488D3425[00000000]     lea rsi,[allUserInput]
   485 000005F7 488DB8[00000000]       lea rdi,[prevCmd+rax]
   486 000005FE 4889F9                 mov rcx,rdi
   487 00000601 E821010000             call copyStringWithoutRemoveSpace
   488 00000606 4829CF                 sub rdi,rcx
   489 00000609 48013C25[00000000]     add qword[prevCmdOffset],rdi
   490 00000611 48890C25[00000000]     mov qword[prevCmdP],rcx
   491 00000619 480FB70C25[00000000]     movzx rcx,word[bytTracker]
   492 00000622 48FF0425[00000000]     inc qword [prevCmdSizeOffset]
   493 0000062A 488B0425[00000000]     mov rax,qword[prevCmdSizeOffset]
   494 00000632 66898C00[00000000]     mov word[prevCmdSize+rax*2],cx
   495 0000063A 48890425[00000000]     mov qword[prevCmdSizeCalc],rax
   496 00000642 488D0425[00000000]     lea rax,[allUserInput]
   497 0000064A E87C010000             call clearData
   498 0000064F E9A7F9FFFF             jmp _start
   499                                 
   500                                 
   501                                 
   502                                 end:
   503 00000654 4831C9                 xor rcx,rcx
   504 00000657 48C7C03C000000         mov rax,60
   505 0000065E 48C7C700000000         mov rdi,0
   506 00000665 0F05                   syscall
   507                                 
   508                                 getAllCmd:
   509                                  .openUsrDir:
   510 00000667 48C7C002000000          mov rax,2
   511 0000066E 488D3C25[00000000]      lea rdi,[locCmd]
   512 00000676 48C7C600000100          mov rsi,0x10000
   513 0000067D 0F05                    syscall
   514 0000067F 66890425[00000000]      mov word[usrFd],ax
   515                                 
   516                                  .getUsrContent:
   517 00000687 480FB71C25[00000000]      movzx rbx,word[usrFd]
   518 00000690 48C7C0D9000000          mov rax,217
   519 00000697 4889DF                  mov rdi,rbx
   520 0000069A 488D3425[00000000]      lea rsi,[usrContent]
   521 000006A2 48C7C200001000          mov rdx,1048576
   522 000006A9 0F05                    syscall
   523                                 
   524                                  .closeUsrDir:
   525 000006AB 480FB70C25[00000000]      movzx rcx,word[usrFd]
   526 000006B4 48C7C003000000          mov rax,3
   527 000006BB 4889CF                  mov rdi,rcx
   528 000006BE 0F05                    syscall
   529                                 
   530 000006C0 C60425[00000000]01     mov byte[isAllCmdP],1
   531 000006C8 C3                     ret
   532                                 
   533                                 getCwd:
   534 000006C9 48C7C04F000000         mov rax,79
   535 000006D0 488D3C25[00000000]     lea rdi,[cWkDir]
   536 000006D8 48C7C600020000         mov rsi,512
   537 000006DF 0F05                   syscall
   538 000006E1 C60425[00000000]01     mov byte[isCWDSet],1
   539 000006E9 C3                     ret
   540                                 
   541                                 
   542                                 compStringVal:
   543 000006EA FC                     cld
   544 000006EB F3A6                   repe cmpsb
   545 000006ED 49C7C400000000         mov r12,0
   546 000006F4 49C7C501000000         mov r13,1
   547 000006FB 490F44C5               cmovz rax,r13
   548 000006FF 490F45C4               cmovnz rax,r12
   549                                 
   550                                 
   551                                 
   552 00000703 C3                     ret
   553                                 
   554                                 copyString:
   555 00000704 49C7C700000000         mov r15,0
   556 0000070B 48C7C1FFFFFFFF         mov rcx,-1
   557                                  .copy:
   558 00000712 48FFC1                  inc rcx
   559 00000715 480FB6040E              movzx rax,byte[rsi+rcx]
   560 0000071A 3C20                    cmp al,0x20
   561 0000071C 490F44C7                cmovz rax,r15
   562 00000720 88040F                  mov byte[rdi+rcx],al
   563 00000723 74EB                    jz .copy
   564 00000725 4883F800                cmp rax,0
   565 00000729 75E5                    jnz .copy
   566 0000072B C3                     ret
   567                                 
   568                                 
   569                                 copyStringWithoutRemoveSpace:
   570 0000072C 49C7C700000000         mov r15,0
   571                                  .copy:
   572 00000733 480FB606                movzx rax,byte[rsi]
   573 00000737 8807                    mov byte[rdi],al
   574 00000739 4883F800                cmp rax,0
   575 0000073D 7406                    jz .end
   576 0000073F 48FFC6                  inc rsi
   577 00000742 48FFC7                  inc rdi
   578 00000745 EBEA                    jmp .copy
   579                                 
   580                                  .end:
   581 00000747 48FFC7                  inc rdi
   582 0000074A C3                      ret
   583                                 
   584                                 
   585                                 print:
   586 0000074B 48C7C001000000         mov rax,1
   587 00000752 48C7C701000000         mov rdi,1
   588 00000759 498D36                 lea rsi,[r14]
   589 0000075C 4C89FA                 mov rdx,r15
   590 0000075F 0F05                   syscall
   591 00000761 C3                     ret
   592                                 
   593                                 
   594                                 
   595                                 setOptIfIsNull:
   596 00000762 480FB60425[00000000]     movzx rax, byte[opt]
   597 0000076B 4883F800               cmp rax,0
   598 0000076F 7513                   jnz .end
   599                                  .copy:
   600 00000771 488D3425[00000000]      lea rsi,[cWkDir]
   601 00000779 488D3C25[00000000]      lea rdi,[opt]
   602 00000781 E879FFFFFF              call copyString
   603                                  .end:
   604 00000786 4831C0                  xor rax,rax
   605 00000789 C3                     ret
   606                                 
   607                                 
   608                                 countChar:
   609 0000078A 48C7C1FFFFFFFF         mov rcx,-1
   610                                  .count:
   611 00000791 48FFC1                  inc rcx
   612 00000794 480FB61408              movzx rdx,byte[rax+rcx]
   613 00000799 4883FA00                cmp rdx,0
   614 0000079D 75F0                    jnz .count
   615 0000079F C3                     ret
   616                                 
   617                                 
   618                                 getInput:
   619 000007A0 48C7C000000000         mov rax,0
   620 000007A7 48C7C700000000         mov rdi,0
   621 000007AE 488D3425[00000000]     lea rsi,[singleInput]
   622 000007B6 48C7C201000000         mov rdx,1
   623 000007BD 0F05                   syscall
   624 000007BF 480FB70425[00000000]     movzx rax,word[bytTracker]
   625 000007C8 8A1C25[00000000]       mov bl,byte[singleInput]
   626 000007CF C3                     ret
   627                                 
   628                                 
   629                                 
   630                                 clearData:
   631 000007D0 48C7C1FFFFFFFF         mov rcx,-1
   632 000007D7 4D31ED                 xor r13,r13
   633                                  .start:
   634 000007DA 48FFC1                  inc rcx
   635 000007DD 448A2C08                mov r13b,byte[rax+rcx]
   636 000007E1 4180FD00                cmp r13b,0
   637 000007E5 C6040800                mov byte[rax+rcx],0
   638 000007E9 75ED                    jnz .start
   639 000007EB C3                     ret
   640                                 
   641                                 clearNData:
   642 000007EC 4801C3                 add rbx,rax
   643 000007EF 4D31ED                 xor r13,r13
   644                                 
   645                                  .start:
   646 000007F2 448A28                  mov r13b,byte[rax]
   647 000007F5 4839C3                  cmp rbx,rax
   648 000007F8 7406                    jz .end
   649 000007FA C60000                  mov byte[rax],0
   650 000007FD 48FFC0                  inc rax
   651 00000800 EBEE                    jmp .start
   652                                 
   653                                  .end:
   654 00000802 C3                      ret
   655                                 
   656                                 
   657                                 
   658                                 
   659                                 
   660                                 
   661                                 
   662                                 
   663                                 
   664                                 
   665                                 
   666                                 
   667                                 
   668                                 
   669                                 
   670                                 
