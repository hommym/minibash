     1                                 %line 1+1 main.asm
     2                                 
     3                                 
     4                                 
     5                                 
     6                                 
     7                                 
     8                                 
     9                                 [section .data]
    10 00000000 0000                   bytTracker dw 0
    11 00000002 402000                 symbol db "@",0x20,0
    12 00000005 6D792D626173683A00     startChar db "my-bash:",0
    13 0000000E 2F7573722F62696E00     locCmd db "/usr/bin",0
    14 00000017 436F6D6D616E64204E-    cmdNotFoundErr db "Command Not Found ðŸ˜ž",0xa,0
    15 00000017 6F7420466F756E6420-
    16 00000017 F09F989E0A00       
    17 0000002F 6D696E692D62617368-    cdCmdErr db "mini-bash: cd: No such file or folder ðŸ˜ž",0xa,0
    18 0000002F 3A2063643A204E6F20-
    19 0000002F 737563682066696C65-
    20 0000002F 206F7220666F6C6465-
    21 0000002F 7220F09F989E0A00   
    22 0000005B 00                     isAllCmdP db 0
    23 0000005C 00                     isCWDSet db 0
    24 0000005D 636400                 cdCmd db "cd",0
    25 00000060 636C65617200           clearCmd db "clear",0
    26 00000066 2D5420787465726D2D-    clearOpt db "-T xterm-256color",0
    27 00000066 323536636F6C6F7200 
    28 00000078 6578697400             exitCmd db "exit",0
    29 0000007D 00                     isEnvP db 0
    30 0000007E 00                     escFlag db 0
    31 0000007F 0000000000000000       cmdHistoryOffset dq 0
    32 00000087 FFFFFFFFFFFFFFFF       cmdsSizeHistoryOffset dq -1
    33 0000008F 0000000000000000       mostRecentCmdSizeOffsetCalc dq 0
    34                                 
    35                                 
    36                                 
    37                                 [section .bss]
    38 00000000 <gap>                  usrContent resq 131072
    39 00100000 <gap>                  cmdOutput resq 2621440
    40 01500000 <gap>                  cmdHistory resq 2621440
    41 02900000 <gap>                  exeCmdsSizeHistory resw 1000
    42 029007D0 <gap>                  envp resq 100
    43 02900AF0 <gap>                  allUserInput resb 1024
    44 02900EF0 <gap>                  opt resb 500
    45 029010E4 <gap>                  cmdLength resb 1
    46 029010E5 <gap>                  addresOfExevArgs resq 20
    47 02901185 <gap>                  cmd resb 30
    48 029011A3 <gap>                  currentCmdC resb 30
    49 029011C1 <gap>                  fullPath resb 30
    50 029011DF <gap>                  pipFd resd 2
    51 029011E7 <gap>                  usrFd resw 1
    52 029011E9 <gap>                  singleInput resb 1
    53 029011EA <gap>                  cWkDir resb 1024
    54 029015EA <gap>                  oldCWkDir resb 1024
    55 029019EA <gap>                  mostRecentCmdP resq 1
    56                                 
    57                                 
    58                                 [section .text]
    59                                 [global _start]
    60                                 
    61                                 
    62                                 
    63                                 _start:
    64 00000000 480FB60425[00000000]     movzx rax,byte[isCWDSet]
    65 00000009 4883F800               cmp rax,0
    66 0000000D 7503                   jnz resetMem
    67 0000000F E88E060000             call getCwd
    68                                 
    69                                 resetMem:
    70 00000014 48C7C300004001         mov rbx,20971520
    71 0000001B 488D0425[00000000]     lea rax,[cmdOutput]
    72 00000023 E89D070000             call clearNData
    73 00000028 488D0425[00000000]     lea rax,[cmd]
    74 00000030 E874070000             call clearData
    75 00000035 488D0425[00000000]     lea rax,[opt]
    76 0000003D 48C7C3F4010000         mov rbx,500
    77 00000044 E87C070000             call clearNData
    78 00000049 66C70425[00000000]-    mov word[bytTracker],0
    79 00000049 0000               
    80 00000053 803C25[00000000]00     cmp byte[isEnvP],0
    81 0000005B 7539                   jnz printDefs
    82                                 
    83                                 getEnvP:
    84 0000005D C60425[00000000]01     mov byte[isEnvP],1
    85 00000065 48C7C0FFFFFFFF         mov rax,-1
    86 0000006C 48C7C1FFFFFFFF         mov rcx,-1
    87                                 
    88                                  .getStartAdresOfEnvP:
    89 00000073 48FFC0                  inc rax
    90 00000076 488B14C4                mov rdx,qword[rsp+rax*8]
    91 0000007A 4883FA00                cmp rdx,0
    92 0000007E 75F1                    jnz .getStartAdresOfEnvP
    93                                 
    94                                  .storeEnvP:
    95 00000080 48FFC0                  inc rax
    96 00000083 48FFC1                  inc rcx
    97 00000086 488B14C4                mov rdx,qword[rsp+rax*8]
    98 0000008A 488914CD[00000000]      mov qword[envp+rcx*8],rdx
    99 00000092 4883FA00                cmp rdx,0
   100 00000096 75E6                    jnz .storeEnvP
   101                                 
   102                                 
   103                                 printDefs:
   104 00000098 4C8D3425[00000000]     lea r14,[startChar]
   105 000000A0 49C7C708000000         mov r15,8
   106 000000A7 E878060000             call print
   107 000000AC 488D0425[00000000]     lea rax,[cWkDir]
   108 000000B4 E8AA060000             call countChar
   109 000000B9 4C8D3425[00000000]     lea r14,[cWkDir]
   110 000000C1 4989C7                 mov r15,rax
   111 000000C4 E85B060000             call print
   112 000000C9 4C8D3425[00000000]     lea r14,[symbol]
   113 000000D1 49C7C702000000         mov r15,2
   114 000000D8 E847060000             call print
   115                                 
   116                                 getBinContent:
   117 000000DD 480FB60425[00000000]     movzx rax,byte[isAllCmdP]
   118 000000E6 4883F800               cmp rax,0
   119 000000EA 7503                   jnz getUserInput
   120 000000EC E84F050000             call getAllCmd
   121                                 
   122                                 
   123                                 getUserInput:
   124 000000F1 E883060000             call getInput
   125 000000F6 49C7C000000000         mov r8,0
   126 000000FD 49C7C101000000         mov r9,1
   127                                 
   128                                 
   129                                 checkEscFlag:
   130 00000104 803C25[00000000]01     cmp byte[escFlag],1
   131 0000010C 0F84BC030000           jz processEscChars
   132                                 
   133                                 setEscFlag:
   134 00000112 80FB1B                 cmp bl,0x1B
   135 00000115 4D0F44C1               cmovz r8,r9
   136 00000119 44880425[00000000]     mov byte[escFlag],r8b
   137 00000121 74CC                   jz getUserInput
   138                                 
   139                                 
   140                                 
   141                                 
   142                                 saveInput:
   143 00000123 80FB0A                 cmp bl,0xa
   144 00000126 740C                   jz printInput
   145 00000128 8898[00000000]         mov byte[allUserInput+rax],bl
   146 0000012E 66FF0425[00000000]     inc word[bytTracker]
   147                                 
   148                                 
   149                                 
   150                                 
   151                                 printInput:
   152 00000136 48C7C001000000         mov rax,1
   153 0000013D 48C7C701000000         mov rdi,1
   154 00000144 488D3425[00000000]     lea rsi,[singleInput]
   155 0000014C 48C7C201000000         mov rdx,1
   156 00000153 0F05                   syscall
   157 00000155 7598                   jnz getUserInput
   158 00000157 480FB60425[00000000]     movzx rax,byte[allUserInput]
   159 00000160 4883F800               cmp rax,0
   160 00000164 0F8490FEFFFF           jz _start
   161                                 
   162 0000016A 4831DB                 xor rbx,rbx
   163 0000016D 49C7C0FFFFFFFF         mov r8,-1
   164 00000174 48C7C1FFFFFFFF         mov rcx,-1
   165 0000017B 48C7C200000000         mov rdx,0
   166 00000182 480FB70425[00000000]     movzx rax,word[bytTracker]
   167 0000018B C680[00000000]00       mov byte[allUserInput+rax],0
   168                                 
   169                                 
   170                                 
   171                                 
   172                                 processInput:
   173                                  .getCmd:
   174 00000192 49FFC0                  inc r8
   175 00000195 418A98[00000000]        mov bl,byte[allUserInput+r8]
   176 0000019C 4C39C0                  cmp rax,r8
   177 0000019F 7430                    jz setCmdLen
   178 000001A1 80FB20                  cmp bl,0x20
   179 000001A4 480F44DA                cmovz rbx,rdx
   180 000001A8 418898[00000000]        mov byte[cmd+r8],bl
   181 000001AF 75DF                    jnz .getCmd
   182 000001B1 4D31FF                  xor r15,r15
   183                                 
   184                                  .getOpt:
   185 000001B4 49FFC0                  inc r8
   186 000001B7 48FFC1                  inc rcx
   187 000001BA 418A98[00000000]        mov bl,byte[allUserInput+r8]
   188 000001C1 80FB20                  cmp bl,0x20
   189 000001C4 490F44DF                cmovz rbx,r15
   190 000001C8 8899[00000000]          mov byte[opt+rcx],bl
   191 000001CE 4C39C0                  cmp rax,r8
   192 000001D1 75DF                    jnz .getOpt
   193                                 
   194                                 
   195                                 setCmdLen:
   196 000001D3 4929C8                 sub r8,rcx
   197 000001D6 44880425[00000000]     mov byte[cmdLength],r8b
   198                                 
   199                                 
   200                                 
   201                                 checkCdCmd:
   202 000001DE 488D3425[00000000]     lea rsi,[cdCmd]
   203 000001E6 488D3C25[00000000]     lea rdi,[cmd]
   204 000001EE 48C7C103000000         mov rcx,3
   205 000001F5 E8C9040000             call compStringVal
   206 000001FA 4883F800               cmp rax,0
   207 000001FE 0F858C020000           jnz processCdCmd
   208                                 
   209                                 
   210                                 
   211                                 
   212                                 checkExitCmd:
   213 00000204 488D3425[00000000]     lea rsi,[exitCmd]
   214 0000020C 488D3C25[00000000]     lea rdi,[cmd]
   215 00000214 48C7C105000000         mov rcx,5
   216 0000021B E8A3040000             call compStringVal
   217 00000220 4883F800               cmp rax,0
   218 00000224 0F8502040000           jnz end
   219                                 
   220                                 
   221                                 
   222                                 checkCmd:
   223 0000022A 4D31D2                 xor r10,r10
   224                                  .checkCItemIfValid:
   225 0000022D 4981FA00001000          cmp r10,1048576
   226 00000234 7D60                    jge printCmdNotFound
   227 00000236 418A82[13000000]        mov al,byte[usrContent+r10+19]
   228 0000023D 3C00                    cmp al,0
   229 0000023F 7455                    jz printCmdNotFound
   230 00000241 4831C9                  xor rcx,rcx
   231 00000244 4D31DB                  xor r11,r11
   232 00000247 4D89D3                  mov r11,r10
   233 0000024A 4983C313                add r11,19
   234                                 
   235                                  .getCurrentCmdInDirent:
   236 0000024E 418A83[00000000]        mov al,byte[usrContent+r11]
   237 00000255 3C00                    cmp al,0
   238 00000257 8881[00000000]          mov byte[currentCmdC+rcx],al
   239 0000025D 7406                    jz .cmpCmds
   240 0000025F 49FFC3                  inc r11
   241 00000262 48FFC1                  inc rcx
   242 00000265 EBE5                    jmp .getCurrentCmdInDirent
   243                                 
   244                                  .cmpCmds:
   245 00000267 480FB60C25[00000000]      movzx rcx,byte[cmdLength]
   246 00000270 488D3425[00000000]      lea rsi,[cmd]
   247 00000278 488D3C25[00000000]      lea rdi,[currentCmdC]
   248 00000280 E83E040000              call compStringVal
   249 00000285 4883F800                cmp rax,0
   250 00000289 7552                    jnz creatFullPathToCmd
   251                                 
   252                                  .updateByteRead:
   253 0000028B 490FB782[10000000]      movzx rax,word[usrContent+r10+16]
   254 00000293 4901C2                  add r10,rax
   255 00000296 EB93                    jmp .checkCItemIfValid
   256                                 
   257                                 
   258                                 printCmdNotFound:
   259 00000298 E83F050000             call getAddressInHistoryOfMostRecentExeCmd
   260 0000029D 48890425[00000000]     mov qword[mostRecentCmdP],rax
   261 000002A5 48891425[00000000]     mov qword[mostRecentCmdSizeOffsetCalc],rdx
   262 000002AD 4C8D3425[00000000]     lea r14,[cmdNotFoundErr]
   263 000002B5 49C7C717000000         mov r15,23
   264 000002BC E863040000             call print
   265 000002C1 E935FDFFFF             jmp _start
   266                                 
   267                                 printCdErr:
   268 000002C6 4C8D3425[00000000]     lea r14,[cdCmdErr]
   269 000002CE 49C7C72B000000         mov r15,43
   270 000002D5 E84A040000             call print
   271 000002DA E91CFDFFFF             jmp _start
   272                                 
   273                                 creatFullPathToCmd:
   274 000002DF 49C7C0FFFFFFFF         mov r8,-1
   275 000002E6 48C7C1FFFFFFFF         mov rcx,-1
   276                                  .addUsrPath:
   277 000002ED 49FFC0                  inc r8
   278 000002F0 48FFC1                  inc rcx
   279 000002F3 480FB681[00000000]      movzx rax,byte[locCmd+rcx]
   280 000002FB 48C7C32F000000          mov rbx,"/"
   281 00000302 4883F800                cmp rax,0
   282 00000306 480F44C3                cmovz rax,rbx
   283 0000030A 418880[00000000]        mov byte[fullPath+r8],al
   284 00000311 75D8                    jnz .addUsrPath
   285 00000313 48C7C1FFFFFFFF          mov rcx,-1
   286                                 
   287                                  .addCmd:
   288 0000031A 49FFC0                  inc r8
   289 0000031D 48FFC1                  inc rcx
   290 00000320 480FB681[00000000]      movzx rax,byte[cmd+rcx]
   291 00000328 48C7C300000000          mov rbx,0
   292 0000032F 4883F800                cmp rax,0
   293 00000333 480F44C3                cmovz rax,rbx
   294 00000337 418880[00000000]        mov byte[fullPath+r8],al
   295 0000033E 75D8                    jnz .addCmd
   296                                 
   297                                 
   298                                 
   299 00000340 48C70425[00000000]-    mov qword[addresOfExevArgs],cmd
   300 00000340 [00000000]         
   301 0000034C 49C7C008000000         mov r8,8
   302 00000353 480FB60425[00000000]     movzx rax, byte[opt]
   303 0000035C 4883F800               cmp rax,0
   304 00000360 7432                   jz createPip
   305 00000362 4C8D1425[00000000]     lea r10,[opt]
   306                                 
   307                                  .getAddresOfOpt:
   308 0000036A 4D8990[00000000]        mov qword[addresOfExevArgs+r8],r10
   309 00000371 4983C008                add r8,8
   310 00000375 48C7C1FFFFFFFF          mov rcx,-1
   311                                 
   312                                  .contByte:
   313 0000037C 48FFC1                  inc rcx
   314 0000037F 490FB61C0A              movzx rbx,byte[r10+rcx]
   315 00000384 4883FB00                cmp rbx,0
   316 00000388 75F0                    jnz .contByte
   317 0000038A 48FFC1                 inc rcx
   318 0000038D 4901CA                 add r10,rcx
   319 00000390 41803A00               cmp byte[r10],0
   320 00000394 75D2                   jnz .getAddresOfOpt
   321                                 
   322                                 
   323                                 
   324                                 
   325                                 
   326                                 createPip:
   327 00000396 49C780[00000000]00-    mov qword[addresOfExevArgs+r8],0
   328 00000396 000000             
   329 000003A1 48C7C016000000         mov rax,22
   330 000003A8 488D3C25[00000000]     lea rdi,[pipFd]
   331 000003B0 0F05                   syscall
   332                                 
   333                                 creatChildProc:
   334 000003B2 48C7C039000000         mov rax,57
   335 000003B9 0F05                   syscall
   336 000003BB 4883F800               cmp rax,0
   337 000003BF 7406                   jz childProc
   338 000003C1 7F55                   jg parentCont
   339 000003C3 0F8C63020000           jl end
   340                                 
   341                                 
   342                                 
   343                                 
   344                                 
   345                                 childProc:
   346 000003C9 4831DB                 xor rbx,rbx
   347 000003CC 8B1C25[00000000]       mov ebx,dword[pipFd]
   348 000003D3 48C7C003000000         mov rax,3
   349 000003DA 4889DF                 mov rdi,rbx
   350 000003DD 0F05                   syscall
   351 000003DF 8B1C25[04000000]       mov ebx,dword[pipFd+4]
   352 000003E6 48C7C021000000         mov rax,33
   353 000003ED 4889DF                 mov rdi,rbx
   354 000003F0 48C7C601000000         mov rsi,1
   355 000003F7 0F05                   syscall
   356                                 
   357                                 
   358 000003F9 48C7C03B000000         mov rax ,59
   359 00000400 488D3C25[00000000]     lea rdi,[fullPath]
   360 00000408 488D3425[00000000]     lea rsi,[addresOfExevArgs]
   361 00000410 488D1425[00000000]     lea rdx,[envp]
   362 00000418 0F05                   syscall
   363                                 
   364                                 
   365                                 parentCont:
   366 0000041A 4831C9                 xor rcx,rcx
   367 0000041D 8B0C25[04000000]       mov ecx,dword[pipFd+4]
   368 00000424 48C7C003000000         mov rax,3
   369 0000042B 4889CF                 mov rdi,rcx
   370 0000042E 0F05                   syscall
   371 00000430 48C7C03D000000         mov rax,61
   372 00000437 48C7C7FFFFFFFF         mov rdi,-1
   373 0000043E 4831F6                 xor rsi,rsi
   374 00000441 0F05                   syscall
   375                                 
   376                                 readDataFromChild:
   377 00000443 8B0C25[00000000]       mov ecx,dword[pipFd]
   378 0000044A 48C7C000000000         mov rax,0
   379 00000451 4889CF                 mov rdi,rcx
   380 00000454 488D3425[00000000]     lea rsi,[cmdOutput]
   381 0000045C 48C7C200004001         mov rdx,20971520
   382 00000463 0F05                   syscall
   383 00000465 4831DB                 xor rbx,rbx
   384                                 
   385                                 
   386                                 
   387                                 printOutPutFromChild:
   388 00000468 8A83[00000000]         mov al,byte[cmdOutput+rbx]
   389 0000046E 880425[00000000]       mov byte[singleInput],al
   390 00000475 3C00                   cmp al,0
   391 00000477 0F8442010000           jz saveCmd
   392 0000047D 4C8D3425[00000000]     lea r14,[singleInput]
   393 00000485 49C7C701000000         mov r15,1
   394 0000048C E893020000             call print
   395 00000491 48FFC3                 inc rbx
   396 00000494 EBD0                   jmp printOutPutFromChild
   397                                 
   398                                 processCdCmd:
   399 00000496 E8A0020000             call setOptIfIsNull
   400 0000049B 48C7C050000000         mov rax,80
   401 000004A2 488D3C25[00000000]     lea rdi,[opt]
   402 000004AA 0F05                   syscall
   403 000004AC 4883F800               cmp rax,0
   404 000004B0 0F8C0AFEFFFF           jl printCdErr
   405 000004B6 48C7C101000000         mov rcx,1
   406 000004BD 488D0425[00000000]     lea rax,[cWkDir]
   407 000004C5 E8DF020000             call clearData
   408 000004CA E8D3010000             call getCwd
   409 000004CF E9EC000000             jmp saveCmd
   410                                 
   411                                 
   412                                 processEscChars:
   413 000004D4 80FB5B                 cmp bl,0x5B
   414 000004D7 74FE                   jz .processArowKey
   415                                  .processArowKey:
   416 000004D9 C60425[00000000]00      mov byte[escFlag],0
   417 000004E1 49C7C000000000          mov r8,0
   418 000004E8 49C7C101000000          mov r9,1
   419 000004EF E885020000              call getInput
   420 000004F4 80FB42                  cmp bl,0x42
   421 000004F7 740C                    jz getPrevCmd
   422 000004F9 80FB41                  cmp bl,0x41
   423 000004FC 4D0F44C1                cmovz r8,r9
   424 00000500 7403                    jz getPrevCmd
   425 00000502 E9F4FAFFFF             jmp _start
   426                                 
   427                                 
   428                                 
   429                                 getPrevCmd:
   430 00000507 4D31C9                 xor r9,r9
   431 0000050A 4983F800               cmp r8,0
   432 0000050E 7511                   jnz .up
   433                                 
   434                                  .down:
   435 00000510 E8C7020000              call getAddressInHistoryOfMostRecentExeCmd
   436 00000515 483B0425[00000000]      cmp rax,qword[mostRecentCmdP]
   437 0000051D 0F8CD7FAFFFF            jl _start
   438                                 
   439                                 
   440                                 
   441                                 
   442                                  .up:
   443 00000523 803C25[00000000]00      cmp byte[cmdHistory],0
   444 0000052B 0F84C9FAFFFF            jz _start
   445 00000531 488D0425[00000000]      lea rax,[allUserInput]
   446 00000539 E86B020000              call clearData
   447 0000053E 488B0425[00000000]      mov rax,qword[mostRecentCmdSizeOffsetCalc]
   448 00000546 480FB78400[00000000]      movzx rax, word[exeCmdsSizeHistory+rax*2]
   449 0000054F 66890425[00000000]      mov word[bytTracker],ax
   450 00000557 488B0425[00000000]      mov rax,qword[mostRecentCmdP]
   451 0000055F 4889C6                  mov rsi,rax
   452 00000562 488D3C25[00000000]      lea rdi,[allUserInput]
   453 0000056A E896010000              call copyStringWithoutRemoveSpace
   454 0000056F 488D0425[00000000]      lea rax,[cmdHistory]
   455 00000577 48390425[00000000]      cmp qword[mostRecentCmdP],rax
   456 0000057F 7427                    jz .printCmd
   457 00000581 48FF0C25[00000000]      dec qword[mostRecentCmdSizeOffsetCalc]
   458 00000589 48FF0C25[00000000]      dec qword[mostRecentCmdP]
   459 00000591 488B0425[00000000]      mov rax,qword[mostRecentCmdSizeOffsetCalc]
   460 00000599 480FB78400[00000000]      movzx rax, word[exeCmdsSizeHistory+rax*2]
   461 000005A2 48290425[00000000]      sub qword[mostRecentCmdP],rax
   462                                 
   463                                  .printCmd:
   464 000005AA 4C8D3425[00000000]      lea r14,[allUserInput]
   465 000005B2 4C0FB73C25[00000000]      movzx r15,word[bytTracker]
   466 000005BB E864010000              call print
   467                                 
   468 000005C0 E927FBFFFF             jmp getUserInput
   469                                 
   470                                 
   471                                 
   472                                 
   473                                 saveCmd:
   474                                 
   475 000005C5 488B0425[00000000]     mov rax,qword[cmdHistoryOffset]
   476 000005CD 488D3425[00000000]     lea rsi,[allUserInput]
   477 000005D5 488DB8[00000000]       lea rdi,[cmdHistory+rax]
   478 000005DC 4889F9                 mov rcx,rdi
   479 000005DF E821010000             call copyStringWithoutRemoveSpace
   480 000005E4 4829CF                 sub rdi,rcx
   481 000005E7 48013C25[00000000]     add qword[cmdHistoryOffset],rdi
   482 000005EF 48890C25[00000000]     mov qword[mostRecentCmdP],rcx
   483 000005F7 480FB70C25[00000000]     movzx rcx,word[bytTracker]
   484 00000600 48FF0425[00000000]     inc qword [cmdsSizeHistoryOffset]
   485 00000608 488B0425[00000000]     mov rax,qword[cmdsSizeHistoryOffset]
   486 00000610 66898C00[00000000]     mov word[exeCmdsSizeHistory+rax*2],cx
   487 00000618 48890425[00000000]     mov qword[mostRecentCmdSizeOffsetCalc],rax
   488 00000620 488D0425[00000000]     lea rax,[allUserInput]
   489 00000628 E87C010000             call clearData
   490 0000062D E9C9F9FFFF             jmp _start
   491                                 
   492                                 
   493                                 
   494                                 end:
   495 00000632 4831C9                 xor rcx,rcx
   496 00000635 48C7C03C000000         mov rax,60
   497 0000063C 48C7C700000000         mov rdi,0
   498 00000643 0F05                   syscall
   499                                 
   500                                 getAllCmd:
   501                                  .openUsrDir:
   502 00000645 48C7C002000000          mov rax,2
   503 0000064C 488D3C25[00000000]      lea rdi,[locCmd]
   504 00000654 48C7C600000100          mov rsi,0x10000
   505 0000065B 0F05                    syscall
   506 0000065D 66890425[00000000]      mov word[usrFd],ax
   507                                 
   508                                  .getUsrContent:
   509 00000665 480FB71C25[00000000]      movzx rbx,word[usrFd]
   510 0000066E 48C7C0D9000000          mov rax,217
   511 00000675 4889DF                  mov rdi,rbx
   512 00000678 488D3425[00000000]      lea rsi,[usrContent]
   513 00000680 48C7C200001000          mov rdx,1048576
   514 00000687 0F05                    syscall
   515                                 
   516                                  .closeUsrDir:
   517 00000689 480FB70C25[00000000]      movzx rcx,word[usrFd]
   518 00000692 48C7C003000000          mov rax,3
   519 00000699 4889CF                  mov rdi,rcx
   520 0000069C 0F05                    syscall
   521                                 
   522 0000069E C60425[00000000]01     mov byte[isAllCmdP],1
   523 000006A6 C3                     ret
   524                                 
   525                                 getCwd:
   526 000006A7 48C7C04F000000         mov rax,79
   527 000006AE 488D3C25[00000000]     lea rdi,[cWkDir]
   528 000006B6 48C7C600020000         mov rsi,512
   529 000006BD 0F05                   syscall
   530 000006BF C60425[00000000]01     mov byte[isCWDSet],1
   531 000006C7 C3                     ret
   532                                 
   533                                 
   534                                 compStringVal:
   535 000006C8 FC                     cld
   536 000006C9 F3A6                   repe cmpsb
   537 000006CB 49C7C400000000         mov r12,0
   538 000006D2 49C7C501000000         mov r13,1
   539 000006D9 490F44C5               cmovz rax,r13
   540 000006DD 490F45C4               cmovnz rax,r12
   541                                 
   542                                 
   543                                 
   544 000006E1 C3                     ret
   545                                 
   546                                 copyString:
   547 000006E2 49C7C700000000         mov r15,0
   548 000006E9 48C7C1FFFFFFFF         mov rcx,-1
   549                                  .copy:
   550 000006F0 48FFC1                  inc rcx
   551 000006F3 480FB6040E              movzx rax,byte[rsi+rcx]
   552 000006F8 3C20                    cmp al,0x20
   553 000006FA 490F44C7                cmovz rax,r15
   554 000006FE 88040F                  mov byte[rdi+rcx],al
   555 00000701 74EB                    jz .copy
   556 00000703 4883F800                cmp rax,0
   557 00000707 75E5                    jnz .copy
   558 00000709 C3                     ret
   559                                 
   560                                 
   561                                 copyStringWithoutRemoveSpace:
   562 0000070A 49C7C700000000         mov r15,0
   563                                  .copy:
   564 00000711 480FB606                movzx rax,byte[rsi]
   565 00000715 8807                    mov byte[rdi],al
   566 00000717 4883F800                cmp rax,0
   567 0000071B 7406                    jz .end
   568 0000071D 48FFC6                  inc rsi
   569 00000720 48FFC7                  inc rdi
   570 00000723 EBEA                    jmp .copy
   571                                 
   572                                  .end:
   573 00000725 48FFC7                  inc rdi
   574 00000728 C3                      ret
   575                                 
   576                                 
   577                                 print:
   578 00000729 48C7C001000000         mov rax,1
   579 00000730 48C7C701000000         mov rdi,1
   580 00000737 498D36                 lea rsi,[r14]
   581 0000073A 4C89FA                 mov rdx,r15
   582 0000073D 0F05                   syscall
   583 0000073F C3                     ret
   584                                 
   585                                 
   586                                 
   587                                 setOptIfIsNull:
   588 00000740 480FB60425[00000000]     movzx rax, byte[opt]
   589 00000749 4883F800               cmp rax,0
   590 0000074D 7513                   jnz .end
   591                                  .copy:
   592 0000074F 488D3425[00000000]      lea rsi,[cWkDir]
   593 00000757 488D3C25[00000000]      lea rdi,[opt]
   594 0000075F E879FFFFFF              call copyString
   595                                  .end:
   596 00000764 4831C0                  xor rax,rax
   597 00000767 C3                     ret
   598                                 
   599                                 
   600                                 countChar:
   601 00000768 48C7C1FFFFFFFF         mov rcx,-1
   602                                  .count:
   603 0000076F 48FFC1                  inc rcx
   604 00000772 480FB61408              movzx rdx,byte[rax+rcx]
   605 00000777 4883FA00                cmp rdx,0
   606 0000077B 75F0                    jnz .count
   607 0000077D C3                     ret
   608                                 
   609                                 
   610                                 getInput:
   611 0000077E 48C7C000000000         mov rax,0
   612 00000785 48C7C700000000         mov rdi,0
   613 0000078C 488D3425[00000000]     lea rsi,[singleInput]
   614 00000794 48C7C201000000         mov rdx,1
   615 0000079B 0F05                   syscall
   616 0000079D 480FB70425[00000000]     movzx rax,word[bytTracker]
   617 000007A6 8A1C25[00000000]       mov bl,byte[singleInput]
   618 000007AD C3                     ret
   619                                 
   620                                 
   621                                 
   622                                 clearData:
   623 000007AE 48C7C1FFFFFFFF         mov rcx,-1
   624 000007B5 4D31ED                 xor r13,r13
   625                                  .start:
   626 000007B8 48FFC1                  inc rcx
   627 000007BB 448A2C08                mov r13b,byte[rax+rcx]
   628 000007BF 4180FD00                cmp r13b,0
   629 000007C3 C6040800                mov byte[rax+rcx],0
   630 000007C7 75ED                    jnz .start
   631 000007C9 C3                     ret
   632                                 
   633                                 clearNData:
   634 000007CA 4801C3                 add rbx,rax
   635 000007CD 4D31ED                 xor r13,r13
   636                                 
   637                                  .start:
   638 000007D0 448A28                  mov r13b,byte[rax]
   639 000007D3 4839C3                  cmp rbx,rax
   640 000007D6 7406                    jz .end
   641 000007D8 C60000                  mov byte[rax],0
   642 000007DB 48FFC0                  inc rax
   643 000007DE EBEE                    jmp .start
   644                                 
   645                                  .end:
   646 000007E0 C3                      ret
   647                                 
   648                                 
   649                                 
   650                                 getAddressInHistoryOfMostRecentExeCmd:
   651 000007E1 488B1425[00000000]     mov rdx,qword[cmdsSizeHistoryOffset]
   652 000007E9 4989D1                 mov r9,rdx
   653 000007EC 49D1E1                 shl r9,1
   654 000007EF 488D0425[00000000]     lea rax,[cmdHistory]
   655 000007F7 48030425[00000000]     add rax,qword[cmdHistoryOffset]
   656 000007FF 488D1C25[00000000]     lea rbx,[exeCmdsSizeHistory]
   657 00000807 4C01CB                 add rbx,r9
   658 0000080A 480FB713               movzx rdx,word[rbx]
   659 0000080E 4829D0                 sub rax,rdx
   660 00000811 488B1425[00000000]     mov rdx,qword[cmdsSizeHistoryOffset]
   661 00000819 C3                     ret
   662                                 
   663                                 
   664                                 
   665                                 
   666                                 
   667                                 
   668                                 
   669                                 
   670                                 
   671                                 
   672                                 
   673                                 
   674                                 
   675                                 
