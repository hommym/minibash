     1                                 %line 1+1 main.asm
     2                                 
     3                                 
     4                                 
     5                                 
     6                                 
     7                                 
     8                                 
     9                                 [section .data]
    10 00000000 0000                   bytTracker dw 0
    11 00000002 0000000000000000       envp dq 0
    12 0000000A 402000                 symbol db "@",0x20,0
    13 0000000D 6D792D626173683A00     startChar db "my-bash:",0
    14 00000016 2F7573722F62696E00     locCmd db "/usr/bin",0
    15 0000001F 436F6D6D616E64204E-    cmdNotFoundErr db "Command Not Found ðŸ˜ž",0xa,0
    16 0000001F 6F7420466F756E6420-
    17 0000001F F09F989E0A00       
    18 00000037 6D696E692D62617368-    cdCmdErr db "mini-bash: cd: No such file or folder ðŸ˜ž",0xa,0
    19 00000037 3A2063643A204E6F20-
    20 00000037 737563682066696C65-
    21 00000037 206F7220666F6C6465-
    22 00000037 7220F09F989E0A00   
    23 00000063 00                     isAllCmdP db 0
    24 00000064 00                     isCWDSet db 0
    25 00000065 636400                 cdCmd db "cd",0
    26 00000068 636C65617200           clearCmd db "clear",0
    27 0000006E 1B5B481B5B324A         clearCode db 27, '[', 'H', 27, '[', '2', 'J'
    28                                 cClen equ $ - clearCode
    29                                 
    30                                 
    31                                 
    32                                 
    33                                 [section .bss]
    34 00000000 <gap>                  usrContent resq 131072
    35 00100000 <gap>                  cmdOutput resq 2621440
    36 01500000 <gap>                  allUserInput resb 1024
    37 01500400 <gap>                  opt resb 100
    38 01500464 <gap>                  cmdLength resb 1
    39 01500465 <gap>                  addresOfExevArgs resq 20
    40 01500505 <gap>                  cmd resb 30
    41 01500523 <gap>                  currentCmdC resb 30
    42 01500541 <gap>                  fullPath resb 30
    43 0150055F <gap>                  pipFd resd 2
    44 01500567 <gap>                  usrFd resw 1
    45 01500569 <gap>                  singleInput resb 1
    46 0150056A <gap>                  cWkDir resb 1024
    47 0150096A <gap>                  oldCWkDir resb 1024
    48                                 
    49                                 
    50                                 
    51                                 [section .text]
    52                                 [global _start]
    53                                 
    54                                 
    55                                 
    56                                 _start:
    57 00000000 480FB60425[00000000]     movzx rax,byte[isCWDSet]
    58 00000009 4883F800               cmp rax,0
    59 0000000D 7503                   jnz resetMem
    60 0000000F E805050000             call getCwd
    61                                 
    62                                 resetMem:
    63 00000014 488D0425[00000000]     lea rax,[cmdOutput]
    64 0000001C E879050000             call clearData
    65 00000021 488D0425[00000000]     lea rax,[cmd]
    66 00000029 E86C050000             call clearData
    67 0000002E 488D0425[00000000]     lea rax,[opt]
    68 00000036 E85F050000             call clearData
    69 0000003B 66C70425[00000000]-    mov word[bytTracker],0
    70 0000003B 0000               
    71                                 
    72                                 
    73                                 printDefs:
    74 00000045 4C8D3425[00000000]     lea r14,[startChar]
    75 0000004D 49C7C708000000         mov r15,8
    76 00000054 E814050000             call print
    77 00000059 488D0425[00000000]     lea rax,[cWkDir]
    78 00000061 E81E050000             call countChar
    79 00000066 4C8D3425[00000000]     lea r14,[cWkDir]
    80 0000006E 4989C7                 mov r15,rax
    81 00000071 E8F7040000             call print
    82 00000076 4C8D3425[00000000]     lea r14,[symbol]
    83 0000007E 49C7C702000000         mov r15,2
    84 00000085 E8E3040000             call print
    85                                 
    86                                 getBinContent:
    87 0000008A 480FB60425[00000000]     movzx rax,byte[isAllCmdP]
    88 00000093 4883F800               cmp rax,0
    89 00000097 7503                   jnz getUserInput
    90 00000099 E819040000             call getAllCmd
    91                                 
    92                                 
    93                                 getUserInput:
    94 0000009E 48C7C000000000         mov rax,0
    95 000000A5 48C7C700000000         mov rdi,0
    96 000000AC 488D3425[00000000]     lea rsi,[singleInput]
    97 000000B4 48C7C201000000         mov rdx,1
    98 000000BB 0F05                   syscall
    99                                 
   100                                 saveInput:
   101 000000BD 480FB70425[00000000]     movzx rax,word[bytTracker]
   102 000000C6 8A1C25[00000000]       mov bl,byte[singleInput]
   103 000000CD 80FB0A                 cmp bl,0xa
   104 000000D0 740C                   jz printInput
   105 000000D2 8898[00000000]         mov byte[allUserInput+rax],bl
   106 000000D8 66FF0425[00000000]     inc word[bytTracker]
   107                                 
   108                                 printInput:
   109 000000E0 48C7C001000000         mov rax,1
   110 000000E7 48C7C701000000         mov rdi,1
   111 000000EE 488D3425[00000000]     lea rsi,[singleInput]
   112 000000F6 48C7C201000000         mov rdx,1
   113                                 
   114 000000FD 759D                   jnz getUserInput
   115 000000FF 480FB60425[00000000]     movzx rax,byte[allUserInput]
   116 00000108 4883F800               cmp rax,0
   117 0000010C 0F84E8FEFFFF           jz _start
   118                                 
   119 00000112 4831DB                 xor rbx,rbx
   120 00000115 49C7C0FFFFFFFF         mov r8,-1
   121 0000011C 48C7C1FFFFFFFF         mov rcx,-1
   122 00000123 48C7C200000000         mov rdx,0
   123 0000012A 480FB60425[00000000]     movzx rax ,byte[bytTracker]
   124 00000133 C680[00000000]00       mov byte[allUserInput+rax],0
   125 0000013A 480FB70425[00000000]     movzx rax,word[bytTracker]
   126                                 
   127                                 
   128                                 processInput:
   129                                  .getCmd:
   130 00000143 49FFC0                  inc r8
   131 00000146 418A98[00000000]        mov bl,byte[allUserInput+r8]
   132 0000014D 4C39C0                  cmp rax,r8
   133 00000150 7430                    jz setOptIfIsNull
   134 00000152 80FB20                  cmp bl,0x20
   135 00000155 480F44DA                cmovz rbx,rdx
   136 00000159 418898[00000000]        mov byte[cmd+r8],bl
   137 00000160 75DF                    jnz .getCmd
   138 00000162 4D31FF                  xor r15,r15
   139                                 
   140                                  .getOpt:
   141 00000165 49FFC0                  inc r8
   142 00000168 48FFC1                  inc rcx
   143 0000016B 418A98[00000000]        mov bl,byte[allUserInput+r8]
   144 00000172 80FB20                  cmp bl,0x20
   145 00000175 490F44DF                cmovz rbx,r15
   146 00000179 8899[00000000]          mov byte[opt+rcx],bl
   147 0000017F 4C39C0                  cmp rax,r8
   148 00000182 75DF                    jnz .getOpt
   149                                 
   150                                 
   151                                 
   152                                 setOptIfIsNull:
   153 00000184 4929C8                 sub r8,rcx
   154 00000187 44880425[00000000]     mov byte[cmdLength],r8b
   155 0000018F 480FB60425[00000000]     movzx rax, byte[opt]
   156 00000198 4883F800               cmp rax,0
   157 0000019C 7513                   jnz checkCdCmd
   158 0000019E 488D3425[00000000]     lea rsi,[cWkDir]
   159 000001A6 488D3C25[00000000]     lea rdi,[opt]
   160 000001AE E8A1030000             call copyString
   161                                 
   162                                 
   163                                 checkCdCmd:
   164 000001B3 488D3425[00000000]     lea rsi,[cdCmd]
   165 000001BB 488D3C25[00000000]     lea rdi,[cmd]
   166 000001C3 48C7C103000000         mov rcx,3
   167 000001CA E86B030000             call compStringVal
   168 000001CF 4883F800               cmp rax,0
   169 000001D3 0F8591020000           jnz processCdCmd
   170                                 
   171                                 
   172                                 chekClearCmd:
   173 000001D9 488D3425[00000000]     lea rsi,[clearCmd]
   174 000001E1 488D3C25[00000000]     lea rdi,[cmd]
   175 000001E9 48C7C106000000         mov rcx,6
   176 000001F0 E845030000             call compStringVal
   177 000001F5 4883F800               cmp rax,0
   178 000001F9 741A                   jz checkCmd
   179 000001FB 4C8D3425[00000000]     lea r14,[clearCode]
   180 00000203 49BF07000000000000-    mov r15,cClen
   181 00000203 00                 
   182 0000020D E85B030000             call print
   183 00000212 E9E4FDFFFF             jmp _start
   184                                 
   185                                 
   186                                 checkCmd:
   187 00000217 488D0425[00000000]     lea rax,[allUserInput]
   188 0000021F E876030000             call clearData
   189 00000224 4D31D2                 xor r10,r10
   190                                  .checkCItemIfValid:
   191 00000227 4981FA00001000          cmp r10,1048576
   192 0000022E 7D60                    jge printCmdNotFound
   193 00000230 418A82[13000000]        mov al,byte[usrContent+r10+19]
   194 00000237 3C00                    cmp al,0
   195 00000239 7455                    jz printCmdNotFound
   196 0000023B 4831C9                  xor rcx,rcx
   197 0000023E 4D31DB                  xor r11,r11
   198 00000241 4D89D3                  mov r11,r10
   199 00000244 4983C313                add r11,19
   200                                 
   201                                  .getCurrentCmdInDirent:
   202 00000248 418A83[00000000]        mov al,byte[usrContent+r11]
   203 0000024F 3C00                    cmp al,0
   204 00000251 8881[00000000]          mov byte[currentCmdC+rcx],al
   205 00000257 7406                    jz .cmpCmds
   206 00000259 49FFC3                  inc r11
   207 0000025C 48FFC1                  inc rcx
   208 0000025F EBE5                    jmp .getCurrentCmdInDirent
   209                                 
   210                                  .cmpCmds:
   211 00000261 480FB60C25[00000000]      movzx rcx,byte[cmdLength]
   212 0000026A 488D3425[00000000]      lea rsi,[cmd]
   213 00000272 488D3C25[00000000]      lea rdi,[currentCmdC]
   214 0000027A E8BB020000              call compStringVal
   215 0000027F 4883F800                cmp rax,0
   216 00000283 753D                    jnz creatFullPathToCmd
   217                                 
   218                                  .updateByteRead:
   219 00000285 490FB782[10000000]      movzx rax,word[usrContent+r10+16]
   220 0000028D 4901C2                  add r10,rax
   221 00000290 EB93                    jmp .checkCItemIfValid
   222                                 
   223                                 
   224                                 printCmdNotFound:
   225 00000292 4C8D3425[00000000]     lea r14,[cmdNotFoundErr]
   226 0000029A 49C7C717000000         mov r15,23
   227 000002A1 E8C7020000             call print
   228 000002A6 E950FDFFFF             jmp _start
   229                                 
   230                                 printCdErr:
   231 000002AB 4C8D3425[00000000]     lea r14,[cdCmdErr]
   232 000002B3 49C7C72B000000         mov r15,43
   233 000002BA E8AE020000             call print
   234 000002BF E937FDFFFF             jmp _start
   235                                 
   236                                 creatFullPathToCmd:
   237 000002C4 49C7C0FFFFFFFF         mov r8,-1
   238 000002CB 48C7C1FFFFFFFF         mov rcx,-1
   239                                  .addUsrPath:
   240 000002D2 49FFC0                  inc r8
   241 000002D5 48FFC1                  inc rcx
   242 000002D8 480FB681[00000000]      movzx rax,byte[locCmd+rcx]
   243 000002E0 48C7C32F000000          mov rbx,"/"
   244 000002E7 4883F800                cmp rax,0
   245 000002EB 480F44C3                cmovz rax,rbx
   246 000002EF 418880[00000000]        mov byte[fullPath+r8],al
   247 000002F6 75D8                    jnz .addUsrPath
   248 000002F8 48C7C1FFFFFFFF          mov rcx,-1
   249                                 
   250                                  .addCmd:
   251 000002FF 49FFC0                  inc r8
   252 00000302 48FFC1                  inc rcx
   253 00000305 480FB681[00000000]      movzx rax,byte[cmd+rcx]
   254 0000030D 48C7C300000000          mov rbx,0
   255 00000314 4883F800                cmp rax,0
   256 00000318 480F44C3                cmovz rax,rbx
   257 0000031C 418880[00000000]        mov byte[fullPath+r8],al
   258 00000323 75D8                    jnz .addCmd
   259                                 
   260                                 
   261 00000325 48C70425[00000000]-    mov qword[addresOfExevArgs],cmd
   262 00000325 [00000000]         
   263 00000331 49C7C008000000         mov r8,8
   264 00000338 4C8D1425[00000000]     lea r10,[opt]
   265                                 
   266                                  .getAddresOfOpt:
   267 00000340 4D8990[00000000]        mov qword[addresOfExevArgs+r8],r10
   268 00000347 4983C008                add r8,8
   269 0000034B 48C7C1FFFFFFFF          mov rcx,-1
   270                                 
   271                                  .contByte:
   272 00000352 48FFC1                  inc rcx
   273 00000355 490FB61C0A              movzx rbx,byte[r10+rcx]
   274 0000035A 4883FB00                cmp rbx,0
   275 0000035E 75F0                    jnz .contByte
   276 00000360 48FFC1                 inc rcx
   277 00000363 4901CA                 add r10,rcx
   278 00000366 41803A00               cmp byte[r10],0
   279 0000036A 75D2                   jnz .getAddresOfOpt
   280                                 
   281 0000036C 4983C008               add r8,8
   282 00000370 49C780[00000000]00-    mov qword[addresOfExevArgs+r8],0
   283 00000370 000000             
   284                                 
   285                                 
   286                                 
   287                                 createPip:
   288 0000037B 48C7C016000000         mov rax,22
   289 00000382 488D3C25[00000000]     lea rdi,[pipFd]
   290 0000038A 0F05                   syscall
   291                                 
   292                                 creatChildProc:
   293 0000038C 48C7C039000000         mov rax,57
   294 00000393 0F05                   syscall
   295 00000395 4883F800               cmp rax,0
   296 00000399 7406                   jz childProc
   297 0000039B 7F55                   jg parentCont
   298 0000039D 0F8C00010000           jl end
   299                                 
   300                                 
   301                                 
   302                                 
   303                                 
   304                                 childProc:
   305 000003A3 4831DB                 xor rbx,rbx
   306 000003A6 8B1C25[00000000]       mov ebx,dword[pipFd]
   307 000003AD 48C7C003000000         mov rax,3
   308 000003B4 4889DF                 mov rdi,rbx
   309 000003B7 0F05                   syscall
   310 000003B9 8B1C25[04000000]       mov ebx,dword[pipFd+4]
   311 000003C0 48C7C021000000         mov rax,33
   312 000003C7 4889DF                 mov rdi,rbx
   313 000003CA 48C7C601000000         mov rsi,1
   314 000003D1 0F05                   syscall
   315                                 
   316                                 
   317 000003D3 48C7C03B000000         mov rax ,59
   318 000003DA 488D3C25[00000000]     lea rdi,[fullPath]
   319 000003E2 488D3425[00000000]     lea rsi,[addresOfExevArgs]
   320 000003EA 488D1425[00000000]     lea rdx,[envp]
   321 000003F2 0F05                   syscall
   322                                 
   323                                 
   324                                 parentCont:
   325 000003F4 4831C9                 xor rcx,rcx
   326 000003F7 8B0C25[04000000]       mov ecx,dword[pipFd+4]
   327 000003FE 48C7C003000000         mov rax,3
   328 00000405 4889CF                 mov rdi,rcx
   329 00000408 0F05                   syscall
   330 0000040A 48C7C03D000000         mov rax,61
   331 00000411 48C7C7FFFFFFFF         mov rdi,-1
   332 00000418 4831F6                 xor rsi,rsi
   333 0000041B 0F05                   syscall
   334                                 
   335                                 readDataFromChild:
   336 0000041D 8B0C25[00000000]       mov ecx,dword[pipFd]
   337 00000424 48C7C000000000         mov rax,0
   338 0000042B 4889CF                 mov rdi,rcx
   339 0000042E 488D3425[00000000]     lea rsi,[cmdOutput]
   340 00000436 48C7C200004001         mov rdx,20971520
   341 0000043D 0F05                   syscall
   342 0000043F 4831DB                 xor rbx,rbx
   343                                 
   344                                 
   345                                 
   346                                 printOutPutFromChild:
   347 00000442 8A83[00000000]         mov al,byte[cmdOutput+rbx]
   348 00000448 880425[00000000]       mov byte[singleInput],al
   349 0000044F 3C00                   cmp al,0
   350 00000451 0F84A3FBFFFF           jz _start
   351 00000457 4C8D3425[00000000]     lea r14,[singleInput]
   352 0000045F 49C7C701000000         mov r15,1
   353 00000466 E802010000             call print
   354 0000046B 48FFC3                 inc rbx
   355 0000046E EBD0                   jmp printOutPutFromChild
   356                                 
   357                                 processCdCmd:
   358 00000470 48C7C050000000         mov rax,80
   359 00000477 488D3C25[00000000]     lea rdi,[opt]
   360 0000047F 0F05                   syscall
   361 00000481 4883F800               cmp rax,0
   362 00000485 0F8C1AFEFFFF           jl printCdErr
   363 0000048B 48C7C101000000         mov rcx,1
   364 00000492 488D0425[00000000]     lea rax,[cWkDir]
   365 0000049A E8FB000000             call clearData
   366 0000049F E875000000             call getCwd
   367 000004A4 E952FBFFFF             jmp _start
   368                                 
   369                                 
   370                                 end:
   371 000004A9 4831C9                 xor rcx,rcx
   372 000004AC 48C7C03C000000         mov rax,60
   373 000004B3 48C7C700000000         mov rdi,0
   374 000004BA 0F05                   syscall
   375                                 
   376                                 getAllCmd:
   377                                  .openUsrDir:
   378 000004BC 48C7C002000000          mov rax,2
   379 000004C3 488D3C25[00000000]      lea rdi,[locCmd]
   380 000004CB 48C7C600000100          mov rsi,0x10000
   381 000004D2 0F05                    syscall
   382 000004D4 66890425[00000000]      mov word[usrFd],ax
   383                                 
   384                                  .getUsrContent:
   385 000004DC 480FB71C25[00000000]      movzx rbx,word[usrFd]
   386 000004E5 48C7C0D9000000          mov rax,217
   387 000004EC 4889DF                  mov rdi,rbx
   388 000004EF 488D3425[00000000]      lea rsi,[usrContent]
   389 000004F7 48C7C200001000          mov rdx,1048576
   390 000004FE 0F05                    syscall
   391                                 
   392                                  .closeUsrDir:
   393 00000500 480FB70C25[00000000]      movzx rcx,word[usrFd]
   394 00000509 48C7C003000000          mov rax,3
   395 00000510 4889CF                  mov rdi,rcx
   396 00000513 0F05                    syscall
   397                                 
   398 00000515 C60425[00000000]01     mov byte[isAllCmdP],1
   399 0000051D C3                     ret
   400                                 
   401                                 getCwd:
   402 0000051E 48C7C04F000000         mov rax,79
   403 00000525 488D3C25[00000000]     lea rdi,[cWkDir]
   404 0000052D 48C7C600020000         mov rsi,512
   405 00000534 0F05                   syscall
   406 00000536 C60425[00000000]01     mov byte[isCWDSet],1
   407 0000053E C3                     ret
   408                                 
   409                                 
   410                                 compStringVal:
   411 0000053F FC                     cld
   412 00000540 F3A6                   repe cmpsb
   413 00000542 49C7C400000000         mov r12,0
   414 00000549 49C7C501000000         mov r13,1
   415 00000550 490F44C5               cmovz rax,r13
   416 00000554 490F45C4               cmovnz rax,r12
   417                                 
   418                                 
   419                                 
   420 00000558 C3                     ret
   421                                 
   422                                 copyString:
   423 00000559 48C7C1FFFFFFFF         mov rcx,-1
   424                                  .copy:
   425 00000560 48FFC1                  inc rcx
   426 00000563 480FB6040E              movzx rax,byte[rsi+rcx]
   427 00000568 88040F                  mov byte[rdi+rcx],al
   428 0000056B 4883F800                cmp rax,0
   429 0000056F 75ED                    jnz .copy
   430 00000571 C3                     ret
   431                                 
   432                                 
   433                                 print:
   434 00000572 48C7C001000000         mov rax,1
   435 00000579 48C7C701000000         mov rdi,1
   436 00000580 498D36                 lea rsi,[r14]
   437 00000583 4C89FA                 mov rdx,r15
   438 00000586 0F05                   syscall
   439 00000588 C3                     ret
   440                                 
   441                                 
   442                                 
   443                                 countChar:
   444 00000589 48C7C1FFFFFFFF         mov rcx,-1
   445                                  .count:
   446 00000590 48FFC1                  inc rcx
   447 00000593 480FB61408              movzx rdx,byte[rax+rcx]
   448 00000598 4883FA00                cmp rdx,0
   449 0000059C 75F0                    jnz .count
   450 0000059E C3                     ret
   451                                 
   452                                 clearData:
   453 0000059F 48C7C1FFFFFFFF         mov rcx,-1
   454 000005A6 4D31ED                 xor r13,r13
   455                                  .start:
   456 000005A9 48FFC1                  inc rcx
   457 000005AC 448A2C08                mov r13b,byte[rax+rcx]
   458 000005B0 4180FD00                cmp r13b,0
   459 000005B4 C6040800                mov byte[rax+rcx],0
   460 000005B8 75ED                    jnz .start
   461 000005BA C3                     ret
   462                                 
   463                                 
   464                                 
   465                                 
   466                                 
   467                                 
   468                                 
   469                                 
   470                                 
   471                                 
   472                                 
   473                                 
   474                                 
